<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article SYSTEM "../Requirements/MedCommonsDocbookExtensions.dtd">
<article>
    <title> MedCommons Application  Requests and Tasks </title>
    <articleinfo>
        <invpartnumber>SS-0004</invpartnumber>
        <revhistory>
            <revision>
                <revnumber>A</revnumber>
                <date>April 17, 2005</date>
                <authorinitials>SWD</authorinitials>
                <revdescription>
                    <para>Initial Draft</para>
                </revdescription>
            </revision>
        </revhistory>
        <legalnotice><para>Copyright 2005 MedCommons, Inc.</para></legalnotice>
    </articleinfo>
    
    <sect1>
        <title>Overview</title>
        <para>
       This document describes the application  request and application task layer of the MedCommons system.
        </para>
        <para>
         
            An application request consists of two parts:
            <itemizedlist>
                <listitem>A CCR which defines the content (both clinical and data references) for the request</listitem>
                <listitem>A consent document which defines authentication and authorization rules for the request</listitem>
            </itemizedlist>
           Both the CCR and the constent are user-level documents. This means that they are focussed on the clinical task(s) to be performed.
        </para>
        <para>
            Application tasks are generated by application requests. The units of the task make sense to the users (e.g., transfer data to doctor X) rather than to machines (e.g., upload data to repository gateway Y; then download to 
            enterprise gateway Z; then send notification message to doctor X). 
        </para>
    </sect1>
    <sect1>
        <title>Application Command Service</title>
        <sect2>
            <title>Commands</title>
            <sect3>
                <title>Application Command Dictionary</title>
           
            
            <para>
                
                <table frame="all" tocentry="1">
                    <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        
                        <tbody valign="top">
                            <row>
                                <entry>Command</entry>
                                <entry>Arguments</entry>
                                <entry>Description</entry>
                            </row>
                            <row>
                                <entry>eReferral</entry>
                                <entry>CCR, MedCommons User ID, DispatchResult</entry>
                                <entry>Generates an eReferral using the data specified in the CCR</entry>
                            </row>
                            <row>
                                <entry>eTelegram</entry>
                                <entry>CCR, MedCommons User ID, DispatchResult</entry>
                                <entry>Generates an eTelegram using the data specified in the CCR</entry>
                            </row>
                            <row>
                                <entry>notify</entry>
                                <entry>Target (CCR fragment), Message, MedCommons User ID, DispatchResult</entry>
                                <entry>Sends a notification message to the target specifed in the CCR fragment. </entry>
                            </row>
                            <row>
                                <entry>Reconcile User</entry>
                                <entry>Voluntary MedCommons Id, list of MedCommons IDs (both voluntary and provisional) that will be placed under
                                new ID</entry>
                                <entry>Copies all data references from list of MedCommons IDs to the first ID specified. 
                                    Functionally performs a union of the contents of documents in all MedCommons ID under the first Voluntary MedCommons ID.
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                Note that each of these commands has the MedCommons User ID specified.  The person making the command may not be even specified in the CCR; the MedCommons User ID is the User ID of the person 
                generating the Application Command. Consider the following use case: An eReferral is being generated from one physician to another; these physicians are specifed in the CCR &gt;Source&lt; and &gt;Destination&lt;
                elements. However, the person editing the form is the &gt;Source&lt; doctor's clerk. The MedCommons User ID in this case is the User ID of the clerk.
            </para>
            <para>
            </para>
            </sect3>
            <sect3>
                <title>Command Parameters</title>
                <para>
                    Commands are simply strings. There are currently three defined: "eReferral", "eTelegram", and "notify". 
                </para>
                <para>
                    CCRs are validated CCRs. CCR Fragments are the subsets of CCRs for commands such as 'notify' - the namespace of notification targets is defined by what is admissible 
                    in a CCR.
                </para>
                <para>
                    MedCommons User IDs are specified as strings.
                </para>
                <para>
                   DispatchResult is a data structure containing information on what should happen when a command is completed. This is a function of the return status of the executed command. A successful result might trigger 
                    the next command in a sequence; an unsuccesful one may generate error messages to administrators and stop further processing (not sure this is the right abstraction  - need a way to chain these together). 
                </para>
                <para>
                    TBD: Security fields. Each command will contain fields for a MAC and for encryption keys.  There will probably be a reference here to a document that Yair is writing.
                </para>
            </sect3>
            
        </sect2>
        
        <sect2>
            <title>Message Flow</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/Sequence_eReferral_Command.jpg"/>/>
                </imageobject>
            </mediaobject>
            <para>
                Lots of work needed here. Fighting Poseidon  (so far, Poseidon winning). Object lifelines start and end in the wrong places - need to read manual. Here's a rough idea of how it should be read:
                <orderedlist>
                    <listitem>There's an application that will be generating a eReferral for a DICOM study with three series and with one &gt;Destination&lt; physician. After several edits of the CCR and other parameters a call to issueCommand() is invoked - this in turn</listitem>
                    <listitem>generates an eReferral() call to the Application Command Service, which in turn</listitem>
                    <listitem>generates a call to the Application Command Processor. This parses the CCR and generates several platform layer commands. In the example here there are three data objects to be transferred; a notification
                        message is generated to notify the &gt;Destination&lt; target from the CCR, then </listitem>
                    <listitem>These commands are committed to the Platform Command Queue</listitem>
                </orderedlist>
            </para>
            <para>
                Not included in this explanation so far: status messages returning up the chain; the locations of these services and whether they are public or private. 
            </para>
            <para>
            Then the Platform Command Interpreter (there is one on each gateway) polls the Platform Command Queue (there may be several of these - but for the moment each gateway looks for only one Platform Command Queue).
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/Sequence_Platform_Command_Interpreter.jpg"/>/>
                </imageobject>
                
            </mediaobject>
            A batch of commands is read down from the Platform_Command_Queue; three data transfers are performed; on success the notification message is sent.
            </para>
            <para>
                Not shown yet: error control; dispatch on status (the notification should only be invoked after all three copies are successful).
            </para>
        </sect2>
        
    </sect1>
   
    <sect1>
        <title>To do</title>
        <itemizedlist>
          <listitem> Have a diagram which shows which modules/services are located where.</listitem>
            <listitem>List of outstanding commands (queue); monitoring</listitem>
            <listitem>Performance metrics.</listitem>
            <listitem>Logging</listitem>
            <listitem>APIs for deferring, cancelling commands. How this works with nested commands?</listitem>
            <listitem>Perhaps need a system for specifying priority and/or execution times of commands for commands that don't need to execute immediately.</listitem>
            <listitem>Define database format for requests, tasks, commands. Are all entries in a flat database table or do we permit XML blobs in the database? </listitem>
            <listitem>Must define extra meta-data for request and command execution (status, time started, time completed, number of retries, current retry count, &amp;etc.)</listitem>
        </itemizedlist>
        
    </sect1>
    
    
</article>
