<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article SYSTEM "../Requirements/MedCommonsDocbookExtensions.dtd">
<article>
    <title> MedCommons Network Overview </title>
    <articleinfo>
        <invpartnumber>SS-0002</invpartnumber>
        <revhistory>
            <revision>
                <revnumber>A</revnumber>
                <date>May 17, 2005</date>
                <authorinitials>SWD</authorinitials>
                <revdescription>
                    <para>Initial Draft</para>
                </revdescription>
            </revision>
        </revhistory>
        <legalnotice>
            <para>Copyright 2005 MedCommons, Inc.</para>
        </legalnotice>
    </articleinfo>
    <sect1>
        <title>Overview</title>
        <para> This is an overview document describing the different network nodes/actors/services
            in the MedCommons universe with a high-level description of their APIs. The purpose of
            this document is to define the <emphasis>entire</emphasis> system at a low level of
            detail; detailed descriptions are contained in other documents which will be explicitly
            referred to here. </para>
        <para> TBD: <itemizedlist>
                <listitem>For all service definitions a table needs to be added with the arguments
                    in and out</listitem>
                <listitem>The names of the modules (which are not specified yet here) have to be
                    consistent with the UML diagrams generated by Poseidon.</listitem>
                <listitem>Support for all non-MedCommons protocols (Zabbix, others) need to be
                    explict.</listitem>
                <listitem> Need to include Yair's pictures of parameter blocks. </listitem>
                <listitem> How is it envisioned that the system be extended by partners? </listitem>
                <listitem> Need to describe bootstrap. </listitem>
                <listitem> Issue: repository/webdav. </listitem>
                <listitem> Need to describe user's model of what data is available. Patient vs.
                    provider. How does the HIPAA log mediate their access? </listitem>
                <listitem> Need to diagram data flow.</listitem>
                <listitem/>
            </itemizedlist>
        </para>
        <sect2>
            <title>Design for security, privacy, and control</title>
            <para> MedCommons provides a service which must be trusted and understood by its users.
                Earning and keeping this trust is fundamental to MedCommons success. </para>
            <sect3>
                <title>Identity management and control</title>
                <para> From a design point of view this places some severe constraints on both what
                    data is collected and what data can be accessed. Security has to be layered so
                    that all security failures are local. Compromise of one user's data should not
                    make it possible to compromise another user's data. </para>
                <para> For the system to be understood it's useful to have one person (or persona)
                    in charge of the data. In MedCommons this is the patient. Any actions taken not
                    directly under the patient's control (for example: a transfer of data for an
                    e-referral may go through several intermediate locations; there might be retries
                    if there are network failures; authentication between gateway nodes) must be
                    clearly derived from the patient's consent. For the system to be secure the
                    identities of the users and their data need to be managed in a very constrained <footnote>
                        <para>Document issues: this section is partly philosophy, partly
                            requirements. It would be useful to include a version of Kim Cameron's
                                <emphasis>Laws of Identity</emphasis>
                            <ulink url="http://www.identityblog.com/stories/2004/12/09/thelaws.html"
                                >
                            http://www.identityblog.com/stories/2004/12/09/thelaws.html</ulink>
                            because they express the constraints very clearly. But perhaps this
                            belongs in one of the requirement documents instead of here. </para>
                    </footnote> way. </para>
            </sect3>
            <sect3>
                <title>Two tiered network</title>
                <para> There are two levels within the system - an 'upper' layer where all user
                    interactions occur and a 'lower' or plumbing layer which performs tasks
                    specified by the upper layer. This level is defined in several realms: <table
                        frame="all" tocentry="1">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                            <tbody valign="top">
                                <row>
                                    <entry>Attribute</entry>
                                    <entry>Upper Layer</entry>
                                    <entry>Lower Layer</entry>
                                </row>
                                <row>
                                    <entry>Authorization</entry>
                                    <entry>User-controlled (consents)</entry>
                                    <entry>e-group policy</entry>
                                </row>
                                <row>
                                    <entry>Bootstrap</entry>
                                    <entry>User registration</entry>
                                    <entry>e-group administrator</entry>
                                </row>
                                <row>
                                    <entry>UI</entry>
                                    <entry>Desktop, WADO</entry>
                                    <entry>MedCommons help desk; e-group admins</entry>
                                </row>
                                <row>
                                    <entry>Tasks</entry>
                                    <entry>eReferral, notification</entry>
                                    <entry>COPY, DELETE, NOTIFY</entry>
                                </row>
                                <row>
                                    <entry>Identifiers</entry>
                                    <entry>Tracking Number, MedCommons User ID</entry>
                                    <entry>Data GUID, Transaction ID, eGroupID, nodeID, MedCommons
                                        User ID</entry>
                                </row>
                                <row>
                                    <entry>Logging</entry>
                                    <entry>HIPAA</entry>
                                    <entry>ATNA</entry>
                                </row>
                                <row>
                                    <entry>Control</entry>
                                    <entry>Partly 'uncontrolled'</entry>
                                    <entry>Completely locked down and controlled by
                                    MedCommons</entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </table>
                </para>
            </sect3>
        </sect2>
        <sect2>
            <title>Network Devices</title>
            <para> The MedCommons network consists of <itemizedlist>
                    <listitem>a set of centralized hosted services, and </listitem>
                    <listitem>a set of secure data storage nodes that may or may not be hosted by
                        MedCommons, and </listitem>
                    <listitem>a set of data storage nodes which may or may not be secure , and</listitem>
                    <listitem>3rd party partner applications, and</listitem>
                    <listitem>a set of personal data storage devices for which security is limited,
                        and </listitem>
                    <listitem>lightweight browser-based client applications. </listitem>
                    <listitem> connections to existing networks of clinical devices via standard
                        protocols such as DICOM and HL7. </listitem>
                </itemizedlist>
            </para>
            <sect3>
                <title>High level overview - connections between components</title>
                <para> First - the top tier of the network breaks down into some central (hosted)
                    services and repositories. Some of these repositories may be hosted by
                    MedCommons, others by partners of MedCommons. The central services perform a
                    vital command/control function for the entire network. <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/Repositories_Central.png"/>
                        Command/Control</imageobject>
                    </mediaobject>
                </para>
                <para> For data transfers connections can be made directly between repositories.
                    Intermediate repositories may be used to get around firewall constraints. <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/Sender_Receiver_Transfers.png"/> Data
                            Transfer</imageobject>
                    </mediaobject>
                </para>
                <para> Data gets in and out of the system via a 'Gateway'. Gateways talk to
                    repositories, not to central. This is for both security and scaling reasons:
                    repositories are more locked down than gateways (a gateway may be a small
                    component on a third party machine); the polling by gateways on repositories for
                    commands to execute will scale better than both respositories and gateways
                    polling on central. <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/Enterpise_Gateway_Central.png"/> Gateway
                            Architecture</imageobject>
                    </mediaobject>
                </para>
                <para> When a user accesses MedCommons the central services are accessed during the
                    initial logon phase. After a user is authenticated they are redirected
                    automatically to a repository which takes the user's credientials and context
                    information to start their session. <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/MedCommons_User_Access.png"/> User
                        access</imageobject>
                    </mediaobject> The user interface is primarily managed by a repository - if/when
                    data is needed from a central service the repository typically gets this from
                    the service directly rather than the client getting it from central. </para>
            </sect3>
            <sect3>
                <title>High-Level overview: Example of data transfer from gateway to repository</title>
                <para> This section describes in sketchy detail how <itemizedlist>
                        <listitem>DICOM data is received and imported into a Gateway</listitem>
                        <listitem>The selection of data by a user and the generation of an
                            e-Referral</listitem>
                        <listitem>How this data is transferred from the Gateway to a Repository</listitem>
                        <listitem>How this data is transferred from one Repository to another
                            Repository</listitem>
                    </itemizedlist> There are many details omitted reguarding encryption keys,
                    detection of when a DICOM series is complete, error handling, and logging.
                        <emphasis>Editorial comment: the purpose of this section is to provide some
                        context for the sections that follow. There may be other diagrams that
                        should be included; some of the ones here might be simplifed and congealed
                        into a single diagram. If these diagrams are clutter then they should be
                        removed; if they are at the wrong level of abstraction they should be
                        changed. </emphasis>
                </para>
                <para> This shows the logic for how a gateway imports a single DICOM image.
                    Different document types will have different logic. DICOM objects have
                    relatively strong identifiers; in practice duplicates are sent often (at many
                    sites more than 50% of the transfers will be duplicates - at some sites as high
                    as 80%). <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/ImportDICOMImageToGateway.png" scale="50">
                                User access</imagedata>
                        </imageobject>
                    </mediaobject> DICOM objects range in size from 64K (a small PET image) to more
                    than a GB of data (a multiframe cardiac study). </para>
                <para> Many DICOM objects are sent on a single DICOM association - sometimes the
                    objects in this stream belong to more than a single DICOM series. A series is a
                    collection of DICOM images that is clinically significant - for more details see
                        <emphasis>TBD</emphasis>. <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/ImportSeriesIntoGateway.png" scale="50">
                                Import Series </imagedata>
                        </imageobject>
                    </mediaobject> After the DICOM series is declared complete it is considered
                    fixed content from the point of view of MedCommons. This means that the data
                    objects are immutable; the collection itself is closed. If more images arrive at
                    a future date for this series a new collection will be created but the orginal
                    one stays since it may be referenced. </para>
                <para> Once DICOM images are on the gateway they may be selected and transmitted to
                    repositories. The gateway needs to have a strong identifier for the data before
                    it can send it (the request is going into a queue; there aren't any assurances
                    that the transfer is immediate). <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/Submit_e_ReferralFromGateway.png" scale="50"
                                >Submit e-Referral</imagedata>
                        </imageobject>
                    </mediaobject>
                </para>
                <para> Gateways poll on a single repository for commands <footnote> Note: left out
                        step where repository gets commands for the enterprise gateways defined in
                        its e-group. </footnote>. As part of the bootstrap process each gateway has
                    a key and each repository validates it in each command. <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/GatewayToRepositoryTransfer.png" scale="50">
                                Gateway to Repository</imagedata>
                        </imageobject>
                    </mediaobject> The data is encrypted with a symmetric key supplied by central
                    via the repository. There is no direct communication between the gateway and
                    central services. </para>
                <para> Similarly, Repositories poll on a central service for commands. Here a
                    transfer is invoked between two repositories. <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/RepositoryToRepositoryTransfer.png"
                                scale="50"> Repository to Repository </imagedata>
                        </imageobject>
                    </mediaobject> Additional hashing may be required here for integrity checking.
                    While the names of each file are the SHA-1 hash of the file contents and the
                    name of the series is the SHA-1 hash of the names of all of the files in the
                    series these values refer to the unencrypted data, not the encrypted files.
                    Since one virtue of using the content-addressable data references is that you
                    can check for the integrity of a file as a low-priority background thread that
                    virtue is lost here unless there is a separate mechanism for keeping metadata
                        around<footnote>Such as WebDAV properties.</footnote>. </para>
            </sect3>
            <sect3>
                <title>Control of components</title>
                <para> One of the dichotomies for modules in the MedCommons system is if the module
                    is under our control. Definitions of 'control' are in the religious section at
                    the end of this document but the general idea is that MedCommons network
                    contains entities that it has complete control over (we write the software; we
                    pay for the hosting of the boxes; no one else has access to these boxes except
                    via the APIs that we define) and boxes that we don't have control over (we may
                    have written some of the software but we don't control the version of the
                    software or other uses that these devices may be used for). The seamless
                    integration of these two worlds is critical for the success of MedCommons. We
                    want people to create new things on our network; we want to keep the system
                    secure. </para>
                <para> Control here means three things: <orderedlist>
                        <listitem>control over the software</listitem>
                        <listitem>control over the distribution</listitem>
                        <listitem>control over the machine</listitem>
                    </orderedlist> Services on the MedCommons network can be considered controlled
                    in the first two senses even when the machine itself is not controlled by
                    MedCommons. </para>
                <para> Uncontrolled can mean that the hardware isn't under our control, or that a
                    third party has installed software on the box running our software, or that
                    there is some aspect of the environment that is not under our control. However -
                    we can run controlled software on these devices. </para>
                <para>
                    <emphasis>Stopped editing here.</emphasis> There are two mechanisms of control -
                    technical and legal. The technical approach includes: <itemizedlist>
                        <listitem/>
                    </itemizedlist> The legal approach includes <itemizedlist>
                        <listitem>License agreements that restrict usage. We may need systems for
                            detecting abuse. For example - people might install their own CCR editor
                            that somehow publishes PHI on the side. </listitem>
                    </itemizedlist>
                </para>
                <para> High-level software modules under MedCommons control: <itemizedlist>
                        <listitem>Services in MedCommons Datacenter</listitem>
                        <listitem>Repository Gateway</listitem>
                        <listitem>Enterprise Gateway Adapter</listitem>
                    </itemizedlist> Software services or applications not under MedCommons control: <itemizedlist>
                        <listitem>XDS Registry</listitem>
                        <listitem>Enterprise Gateway</listitem>
                        <listitem>Embedded Gateway</listitem>
                        <listitem>Office Gateway "Gizmo"</listitem>
                        <listitem>3rd party partner applications</listitem>
                    </itemizedlist>
                </para>
            </sect3>
            <para> The term 'Gateway' is used in several components. This does not imply shared code
                or even a family of products - it's a functional label for a software module that
                imports data into MedCommons or gets data out of MedCommons. </para>
            <para> The "Enterprise Gateway'" and the "Embedded Gateway" both use the same
                "Enterprise Gateway Adapter" module. The only difference between these is that the
                for the Embedded Gateway that a third party will provide the application software
                (say - a DICOM workstation) and the Enterprise Gateway is an open source MedCommons
                application that supports DICOM and other medical protocols for acquiring data.
            </para>
        </sect2>
        <sect2>
            <title>Central</title>
            <para> Central is a set of services, not a node or location. Central services have meet
                the following broad criterion: <itemizedlist>
                    <listitem>They have to be hosted so that they are visible to a number of other
                        nodes such as Repository Gateways and Enterprise Gateways. </listitem>
                    <listitem>These services are published via some directory service such as DNS or
                        UDDI.</listitem>
                    <listitem>
                        <para> These services are not distributed for sale; therefore they do not
                            need to have their source code released under the GPL even if they use
                            GPL components<footnote>Bill - this probably should be reworded so that
                                it doesn't sound offensive to open source people.</footnote>.
                        </para>
                    </listitem>
                    <listitem> Other nodes expect that the central services will be available; other
                        portions of the network may not function without critical central services
                        or may operate a lower level of usefulness. This means that the central
                        services must be available. However, the scaling performance, failure,
                        recovery, and redundancy modes may differ for each service. </listitem>
                    <listitem> All central services need work in a hostile environment. While the
                        machines will be physically secure and protected with standard practice
                        firewalls it must be anticipated that MedCommons machines will be targets
                        because people want to steal data, people want to use our resources for
                        non-medical record storage, or because we're going to claim we have a secure
                        system and thus we've made ourselves a target. The nature of these attacks
                        and mitigating strategies will be addressed in periodic risk assessments.
                    </listitem>
                </itemizedlist>
            </para>
            <sect3>
                <title>Function</title>
                <itemizedlist>
                    <listitem>
                        <para>Register patients via web interface. MedCommons patient identifiers
                            are global and work between institutions.</para>
                    </listitem>
                    <listitem>User authentication. Central is in charge of data access to the secure
                        side of the MedCommons network.</listitem>
                    <listitem>Tracking number utilities. The Tracking Number is the main (only?)
                        user entry point to data.</listitem>
                    <listitem>Data registry. All data objects in the MedCommons universe must be
                        addressable.</listitem>
                    <listitem>Key service: store keys for data access</listitem>
                    <listitem>Gateway registration/installation</listitem>
                    <listitem>Command queue</listitem>
                    <listitem>Log Service (includes HIPAA log API)</listitem>
                    <listitem>Notification service</listitem>
                </itemizedlist>
            </sect3>
            <sect3>
                <title>Services</title>
                <sect4>
                    <title>Application Request Service</title>
                    <itemizedlist>
                        <listitem>Application Request Service (ARS) takes input from a client
                            application and generates a series of Application Tasks which will
                            complete this request. Bill's: can we get rid of the task layer - go
                            directrly from requests to commands. Answer: maybe. The idea was that
                            requests might not be atomic; breaking them down into an atomic set of
                            tasks first and then translating to commands seemed a good way to model
                            it. But it's complicated when there are so few types of requests.</listitem>
                        <listitem> Application Tasks in turn generate commands for execution by
                            gateways. </listitem>
                        <listitem>Gateways request their commands from the ARS; the ARS also gets
                            update and status messages from the gateways on individual commands.</listitem>
                        <listitem>The ARS manages all dependencies between the requests, tasks, and
                            commands. In particular the ARS provides information to the client
                            applications for users see the status of their requests. </listitem>
                    </itemizedlist>
                </sect4>
                <sect4>
                    <title>Log Service</title>
                    <itemizedlist>
                        <listitem>Generate log entries</listitem>
                        <listitem>Retrieve log entries for display</listitem>
                        <listitem>Creates new Tracking Numbers</listitem>
                        <listitem>Creates new MedCommons Ids</listitem>
                    </itemizedlist>
                    <para>
                      The Log Service both creates and retrieves log entries and also performs a number of
                      other system functions as side effects (these side effect behaviours may need to be
                      refactored into dedicated services at a later stage).                      
                    </para>


                    <para>
                      This is a heavily overloaded call that optionally writes
                      an entry to the hipaa log, and optionally returns a
                      number of entries from the tail of the hipaa log. In
                      fact, multiple logs with are supported. Each log entry
                      consists of a number of application specific fields a1-a4
                      and s1-s4 which are intended for interpretation only by
                      the application. <emphasis>However, the newly added
                        service trackstatus.php (below) violates this rule by
                        interpreting s1 as a status field, and a3 as the
                        medcommons id.</emphasis>
                    </para>

                    <para>
                      If not supplied as an input, the service will generate a
                      new tracking number for this entry. If supplied by the
                      user, the service will store a hashed pin value
                      associated with this tracking number. If requested by the
                      caller, the service will generate a standard medcommons
                      id and store it in one of the fields a1-a4
                    </para>
                    
                    <table frame="all" tocentry="1">
                      <title>API for Log Service</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                          <thead>
                            <row>
                              <entry>Call</entry>
                              <entry>Details</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>log</entry>
                              <entrytbl cols="2" colsep="1" rowsep="1">
                                  <tbody>
                                      <row>
                                        <entry><emphasis>Parameter</emphasis></entry>
                                        <entry><emphasis>Description</emphasis></entry>
                                      </row>
                                      <row>
                                          <entry>logName</entry>
                                          <entry>name of the log (always hipaa by convention)</entry>
                                      </row>
                                      <row>
                                          <entry>write</entry>
                                          <entry>if true write to the hipaa log, otherwise nothing is written</entry>
                                      </row>
                                      <row>
                                          <entry>createMcId</entry>
                                          <entry>if  1,2,3,or 4 create a medcommons id and store it in corresponding a1-a4 in entry</entry>
                                      </row>
                                      <row>
                                          <entry>trackingNumber</entry>
                                          <entry>if a value is not supplied then a tracking number is created for this entry</entry>
                                      </row>
                                      <row>
                                          <entry>maxRecords</entry>
                                          <entry>if present then return at most this number of records from the tail of the log file, otherwise return all.</entry>
                                      </row>
                                      <row>
                                          <entry>a[]</entry>
                                          <entry>up to 4 entries representing application specific fields for the log data.  These fields
                                          are indexed.</entry>
                                      </row>
                                      <row>
                                          <entry>s[]</entry>
                                          <entry>up to 4 entries representing application specific fields for the log data.  These fields
                                            are <emphasis role="strong">not</emphasis> indexed.</entry>
                                      </row>
                                  </tbody>
                                </entrytbl>
                           </row>
                      </tbody>
                     </tgroup>
                    </table>
                  </sect4>
                <sect4>
                    <title>Tracking Service</title>
                    <para> The tracking number service offers the ability to associate a minimally unique number
                      with a MedCommons Object and then to provide status, location and PIN-based authentication for that object.
                      <emphasis>Note:  many aspects of the tracking number
                        service are currently accessed via the LogService API.</emphasis>
                    </para>
                    <para>The Tracking Service performs the following functions:</para>
                    <itemizedlist>
                        <listitem>Tracking number Generation</listitem>
                        <listitem>Tracking number/PIN hash storage</listitem>
                        <listitem>Tracking number/PIN hash verification</listitem>
                        <listitem>Tracking number to Gateway Resolver</listitem>
                    </itemizedlist>

                    The API for the Tracking Service is described below:

                    <table frame="all" tocentry="1">
                      <title>API for Tracking Service</title>
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                          <thead>
                            <row>
                              <entry>Call</entry>
                              <entry>Details</entry>
                              <entry>Description</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>generateTrackingNumber</entry>
                              <entrytbl cols="2" colsep="1" rowsep="1">
                                  <tbody>
                                      <row>
                                        <entry><emphasis>Parameter</emphasis></entry>
                                        <entry><emphasis>Description</emphasis></entry>
                                      </row>
                                      <row>
                                          <entry>mcId</entry>
                                          <entry>The MedCommons Id of the user with which to associate
                                          the new Tracking Number.</entry>
                                      </row>
                                      <row>
                                          <entry>hpin</entry>
                                          <entry>Hex-encoded SHA-1 hash of the PIN required for authentication
                                          to allow access to the tracked object.</entry>
                                      </row>
                                      <row>
                                        <entry><emphasis role="strong">output</emphasis></entry>
                                          <entry>The new tracking number is returned in an XML BLOB.</entry>
                                      </row>
                                  </tbody>
                                </entrytbl>
                                <entry>
                                  Generates a new tracking number.  The tracking number is registered and returned
                                  in the output XML from the service.
                                </entry>
                           </row>
                            <row>
                              <entry>lookup</entry>
                              <entrytbl cols="2" colsep="1" rowsep="1">
                                  <tbody>
                                      <row>
                                        <entry><emphasis>Parameter</emphasis></entry>
                                        <entry><emphasis>Description</emphasis></entry>
                                      </row>
                                      <row>
                                          <entry>trackingNumber</entry>
                                          <entry>The tracking number to resolve</entry>
                                      </row>
                                      <row>
                                          <entry>hpin</entry>
                                          <entry>Hex-encoded SHA-1 hash of the PIN required for authentication
                                          to allow access to the tracked object.</entry>
                                      </row>
                                      <row>
                                        <entry><emphasis role="strong">output</emphasis></entry>
                                          <entry>XML Blob containing the The MedCommons Id of the user and the
                                          Gateway associated with the given tracking number.</entry>
                                      </row>
                                  </tbody>
                                </entrytbl>
                                <entry>
                                  Resolves the MedCommons Id and Gateway
                                  belonging to a particular tracking number.
                                  <emphasis>
                                    Note: the precise object to which this
                                    tracking number refers is not resolved by
                                    this API.  It is assumed that the
                                    combination of (TrackingNumber,
                                    MedCommonsId, PIN Hash, Gateway) form a
                                    unique reference to the required object,
                                    and thus no further resolution is required.
                                  </emphasis>
                                </entry>
                           </row>
                            <row>
                              <entry>updateStatus</entry>
                              <entrytbl cols="2" colsep="1" rowsep="1">
                                  <tbody>
                                      <row>
                                        <entry><emphasis>Parameter</emphasis></entry>
                                        <entry><emphasis>Description</emphasis></entry>
                                      </row>
                                      <row>
                                          <entry>mcId</entry>
                                          <entry>The MedCommons Id with which the tracking number
                                          is associated.</entry>
                                      </row>
                                      <row>
                                          <entry>trackingNumber</entry>
                                          <entry>The tracking number of the entry to update.</entry>
                                      </row>
                                      <row>
                                          <entry>status</entry>
                                          <entry>The new status to be recorded.   Currently this is an arbitrary string
                                          value with no constraints.</entry>
                                      </row>
                                      <row>
                                        <entry><emphasis role="strong">output</emphasis></entry>
                                          <entry>None.</entry>
                                      </row>
                                  </tbody>
                                </entrytbl>
                                <entry>
                                  Updates the given tracking number to a new status.  <emphasis>Note: currently
                                    the pin hash is NOT required to update the tracking status.  This needs some
                                  consideration.</emphasis>
                                </entry>
                           </row>
                      </tbody>
                     </tgroup>
                    </table>
                </sect4>
                <sect4>
                    <title>Data Registry Service</title>
                    <sect5>
                        <title>New document</title>
                        <para> New document added to system (document here means 'data' - need to
                            define this more tightly) </para>
                    </sect5>
                    <sect5>
                        <title>Resolve document address</title> Get URL for document in repository
                        gateway plus key (or key reference?) for decoding data. This service is only
                        available to controlled nodes in the system (e.g., the patient desktop
                        service or the WADO service); outside access to the address of the data
                        objects is forbidden. </sect5>
                </sect4>
                <sect4>
                    <title>Member Service</title>
                    <para>The member service creates and stores user identities and credentials along
                    with an association to a default gateway.</para>

                    <table frame="all" tocentry="1">
                      <title>API for Member Service</title>
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                          <thead>
                            <row>
                              <entry>Call</entry>
                              <entry>Details</entry>
                              <entry>Description</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>newMember</entry>
                              <entrytbl cols="2" colsep="1" rowsep="1">
                                  <tbody>
                                      <row>
                                        <entry><emphasis>Parameter</emphasis></entry>
                                        <entry><emphasis>Description</emphasis></entry>
                                      </row>
                                      <row>
                                          <entry>mcId</entry>
                                          <entry>The MedCommons Id with which the new user is
                                          to be associated.  (Note:  must be an existing id).</entry>
                                      </row>
                                      <row>
                                          <entry>Username</entry>
                                          <entry>user specified identifier</entry>
                                      </row>
                                      <row>
                                          <entry>Gateway1</entry>
                                          <entry>Primary gateway name</entry>
                                      </row>
                                      <row>
                                          <entry>Gateway2</entry>
                                          <entry>backup dateway name <emphasis>(currently blank)</emphasis></entry>
                                      </row>
                                      <row>
                                        <entry><emphasis role="strong">output</emphasis></entry>
                                          <entry>None.</entry>
                                      </row>
                                  </tbody>
                                </entrytbl>
                                <entry>
                                  Generates a new tracking number.  The tracking number is registered and returned
                                  in the output XML from the service.
                                </entry>
                           </row>
                            <row>
                              <entry>getMemberInfo</entry>
                              <entrytbl cols="2" colsep="1" rowsep="1">
                                  <tbody>
                                      <row>
                                        <entry><emphasis>Parameter</emphasis></entry>
                                        <entry><emphasis>Description</emphasis></entry>
                                      </row>
                                      <row>
                                          <entry>Username</entry>
                                          <entry>user specified identifier</entry>
                                      </row>
                                      <row>
                                          <entry>hpass</entry>
                                          <entry>Hash of password as a string <emphasis>(NB:  what hashing algorithm etc. should be specified.)</emphasis></entry>
                                      </row>
                                      <row>
                                        <entry><emphasis role="strong">output</emphasis></entry>
                                        <entry>If the given hash of the password matches the recorded hash then the following fields are returned in an XML Blob 
                                          as output: the MedCommons Id, the Gateway1 and Gatway2 fields.  Otherwise an error is raised.
                                        </entry>
                                      </row>
                                  </tbody>
                                </entrytbl>
                                <entry>
                                  Looks up and returns information for the given user.  As a side effect, validates the
                                  user login credentials.
                                </entry>
                           </row>
                            <row>
                              <entry>updateMember</entry>
                              <entrytbl cols="2" colsep="1" rowsep="1">
                                  <tbody>
                                      <row>
                                        <entry><emphasis>Parameter</emphasis></entry>
                                        <entry><emphasis>Description</emphasis></entry>
                                      </row>
                                      <row>
                                          <entry>mcId</entry>
                                          <entry>MedCommons Id of user to be updated.</entry>
                                      </row>
                                      <row>
                                          <entry>Username</entry>
                                          <entry>Username of user to be updated</entry>
                                      </row>
                                      <row>
                                          <entry>hpass</entry>
                                          <entry>Hash of password as a string <emphasis>(NB:  what hashing algorithm etc. should be specified.)</emphasis></entry>
                                      </row>
                                      <row>
                                          <entry>newPass</entry>
                                          <entry>the hash of the new password to be associated with the user.</entry>
                                      </row>
                                      <row>
                                          <entry>newGateway1</entry>
                                          <entry>The new gateway to be associated with the user</entry>
                                      </row>
                                      <row>
                                          <entry>newGateway2</entry>
                                          <entry>The new backup gateway to be associated with the user</entry>
                                      </row>
                                      <row>
                                        <entry><emphasis role="strong">output</emphasis></entry>
                                        <entry>None.</entry>
                                      </row>
                                  </tbody>
                                </entrytbl>
                                <entry>
                                        If the given hash of the password matches the recorded hash then 
                                        the registered information for the user is updated to match the given
                                        parameters.  Otherwise an error is raised.
                                </entry>
                           </row>
                            <row>
                              <entry>newGateway</entry>
                              <entrytbl cols="2" colsep="1" rowsep="1">
                                  <tbody>
                                      <row>
                                        <entry><emphasis>Parameter</emphasis></entry>
                                        <entry><emphasis>Description</emphasis></entry>
                                      </row>
                                  </tbody>
                                </entrytbl>
                                <entry>
                                  TODO.
                                </entry>
                           </row>
                      </tbody>
                     </tgroup>
                    </table>
                </sect4>
                <sect4>
                    <title>Patient login</title>
                    <para> TBD: What login means: login means that you get authorized for some
                        transactions; these credentials can be transferred to controlled devices
                        (need to enumerate); HIPAA logs are made using these credentials. </para>
                </sect4>
                <sect4>
                    <title>Notification service</title>
                    <para>The Notifier Service handles external notifications to
                      users via the external channels of phone, fax, and email.
                      A template based system allows for direct changes to a
                      number of standard messages by non-programmers</para>

                    <para>
                      The Notifier Service takes a standard set of parameters and generates notifications
                      based on them.   Each set of parameters corresponds to a single notification and
                      describes a template to be used and a number of parameters to the template.
                      The Notifierier parameters are:
                      
                      <itemizedlist>
                        <listitem>t - defines the template to be used</listitem>
                        <listitem>m - identifies the recipient address</listitem>
                        <listitem>a to g - identify parameters repesenting dynamic template content (specific to each template).</listitem>
                      </itemizedlist>

                      Only three sets of parameters are supported, these are encoded by appending the index of the parameter set to the parameter name 
                      as "t1" through to "t3", "m1", etc.
                    </para>
                    <table frame="all" tocentry="1">
                      <title>API for Notification Service</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                          <thead>
                            <row>
                              <entry>Call</entry>
                              <entry>Parameters</entry>
                              <entry>Description</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>notify</entry>
                              <entrytbl cols="2" colsep="1" rowsep="1">
                                  <tbody>
                                      <row>
                                        <entry><emphasis>Parameter</emphasis></entry>
                                        <entry><emphasis>Description</emphasis></entry>
                                      </row>
                                      <row>
                                          <entry>NotifyParameters</entry>
                                          <entry>The sets of parameters defining notifications (see above)</entry>
                                      </row>
                                  </tbody>
                                </entrytbl>
                                <entry>
                                  Sends notifications to recipients defined in the parameters.
                                </entry>
                           </row>
                      </tbody>
                     </tgroup>
                    </table>
                </sect4>
                <sect4>
                    <title>Command Queue</title>
                    <para> Multiple command queues. </para>
                </sect4>
            </sect3>
        </sect2>
        <sect2>
            <title>Repository Gateway</title>
            <sect3>
                <title>Function</title>
                <itemizedlist>
                    <listitem>Securely stores patient data</listitem>
                    <listitem/>
                </itemizedlist>
            </sect3>
            <sect3>
                <title>Services</title>
                <sect4>
                    <title>Command interpreter</title>
                    <para> [Document may need refactoring - the command interpreter is in both
                        repository gateways and enterprise gateways] </para>
                    <sect5>
                        <title>Command source</title>
                        <para> Commands are only specified by the ARS; updates on command status are
                            also made to the ARS. </para>
                    </sect5>
                    <sect5>
                        <title>Data Transfer</title>
                        <para> Push or pull data from another gateway. All data transfers are
                            layered on top of HTTP (perhaps layered on WebDAV as well). </para>
                    </sect5>
                    <sect5>
                        <title>Software Update</title>
                        <para> Updates of software (dynamic, if possible) for version changes.
                        </para>
                    </sect5>
                    <sect5>
                        <title>Configuration changes</title>
                        <para> At least two types of configuration changes need to be supported:
                            standard/routine upgrades of existing configurations and 'emergency'
                            configurations if the network is under some type of attack. In the
                            latter case certain services may need to be turned off until software
                            can be upgraded. </para>
                        <para>Examples of standard configurations include: <itemizedlist>
                                <listitem>Port configurations</listitem>
                                <listitem>Data retention/deletion policies.</listitem>
                            </itemizedlist>
                        </para>
                    </sect5>
                    <sect5>
                        <title>Self-test</title>
                        <para> Performs a number of self-test procedures to verify that node is
                            operating correctly. This should include tests on the software
                            checksums, tests of node reachability, other consistency tests. </para>
                    </sect5>
                </sect4>
                <sect4>
                    <title>Patient Desktop service</title>
                    <sect5>
                        <title>Generates HTML view of patient data space</title>
                        <para> Patient Desktop can be generated for either the owner of the data or
                            for a another user. The data may also be filtered (a view for one
                            physician might only have a subset of data). It's not clear that the
                            user would know if they have a subset of data or not. </para>
                    </sect5>
                    <sect5>
                        <title>Links to patient data viewers</title>
                        <para> Currently the WADO viewer is the only supported viewer; other viewers
                            might be supported in the future. </para>
                    </sect5>
                </sect4>
                <sect4>
                    <title>Access data</title>
                </sect4>
                <sect4>
                    <title>Generate log data</title>
                </sect4>
            </sect3>
        </sect2>
        <sect2>
            <title>Enterprise Gateway</title>
            <sect3>
                <title>Function</title>
            </sect3>
            <sect3>
                <title>Services</title>
                <sect4>
                    <title>Image Manager</title>
                    <para> DICOM services. </para>
                </sect4>
                <sect4>
                    <title>XDS Provide and Register</title>
                </sect4>
            </sect3>
        </sect2>
        <sect2>
            <title>Enterprise Gateway Adapter</title>
            <sect3>
                <title>Function</title>
                <itemizedlist>
                    <listitem>Generates fixed content data from imported/curated data</listitem>
                </itemizedlist>
            </sect3>
            <sect3>
                <title>Services</title>
                <para> Note: all services for the Enterprise Gateway Adapter require that the user
                    be authenticated. </para>
                <sect4>
                    <title>Register Data</title>
                    <funcsynopsis>
                        <funcprototype>
                            <funcdef> guid <function>ProvideAndRegister</function>
                            </funcdef>
                            <paramdef>byte [] <parameter>data</parameter>
                            </paramdef>
                            <paramdef>String <parameter>type</parameter>
                            </paramdef>
                            <paramdef>String <parameter>MedCommons User Id</parameter>
                            </paramdef>
                            <paramdef>String <parameter>metadata</parameter>
                            </paramdef>
                        </funcprototype>
                    </funcsynopsis>
                    <para> The MedCommons User Id is the User Id of the owner of the data. </para>
                </sect4>
                <sect4>
                    <title>Transfer Data</title>
                </sect4>
                <para/>
            </sect3>
        </sect2>
        <sect2>
            <title>Gizmo Gateway</title>
            <sect3>
                <title>Function</title>
                <para> Stores data on personal data device (Slug/Fob/iPod). </para>
                <para> Note that there is no ability to import data from a Gizmo to MedCommons. This
                    may be added in the future by adding a service similar to the Enterprise Gateway
                    Adapter. </para>
            </sect3>
            <sect3>
                <title>Services</title>
                <sect4>
                    <title>Data storage</title>
                    <para> Must support some standard type of data transfer mechanism: WebDAV or
                        mountable file system </para>
                </sect4>
                <sect4>
                    <title>Data Access </title>
                    <para/>
                </sect4>
                <sect4>
                    <title>Non-MedCommons store of data</title>
                    <para> Provides a simple mechanism for the user to export data from their
                        MedCommons account; one case is when the user is terminating their
                        relationship with MedCommons. </para>
                </sect4>
            </sect3>
        </sect2>
    </sect1>
    <sect1>
        <title>Product comparisons</title>
        <table frame="all" tocentry="1">
            <tgroup cols="5" align="left" colsep="1" rowsep="1">
                <!--
            <colspec colwidth="2.0in"/>
            <colspec colwidth="1.0in"/>
            <colspec colwidth="1.0in"/>
            <colspec colwidth="1.0in"/>
            -->
                <tbody valign="top">
                    <row>
                        <entry>Description</entry>
                        <entry>Central</entry>
                        <entry>Repository Gateway</entry>
                        <entry>Enterprise Gateway</entry>
                        <entry>Gizmo</entry>
                    </row>
                    <row>
                        <entry>Protocols</entry>
                        <entry>HTTPS</entry>
                        <entry>HTTPS</entry>
                        <entry>HTTP</entry>
                        <entry>??</entry>
                    </row>
                    <row>
                        <entry>Files encrypted?</entry>
                        <entry>?</entry>
                        <entry>Yes</entry>
                        <entry>No</entry>
                        <entry>?</entry>
                    </row>
                    <row>
                        <entry>WADO</entry>
                        <entry>No</entry>
                        <entry>Yes</entry>
                        <entry>Yes</entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry>Patient Desktop</entry>
                        <entry>No</entry>
                        <entry>Yes</entry>
                        <entry>No</entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry>Physically Secure</entry>
                        <entry>Yes</entry>
                        <entry>?</entry>
                        <entry>No</entry>
                        <entry>?</entry>
                    </row>
                    <row>
                        <entry>Controlled by MC</entry>
                        <entry>Yes</entry>
                        <entry>?</entry>
                        <entry>No</entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry>PHI on machine</entry>
                        <entry>No</entry>
                        <entry>Yes</entry>
                        <entry>Yes</entry>
                        <entry>Yes</entry>
                    </row>
                    <row>
                        <entry>PHI encrypted?</entry>
                        <entry>No</entry>
                        <entry>Yes</entry>
                        <entry>No</entry>
                        <entry>?</entry>
                    </row>
                    <row>
                        <entry>General query interface</entry>
                        <entry>No</entry>
                        <entry>No</entry>
                        <entry>Yes</entry>
                        <entry>?</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para/>
    </sect1>
    <sect1>
        <title>Communications between modules</title>
        <sect2>
            <title>Application requests</title>
            <para> The MedCommons Network uses a request mechanism for a number of asynchronous
                tasks. These tasks need to be able to be monitored and measured so that users know
                what is going on as well as the system being able to be supported. A single user
                request can generate several tasks; these tasks in turn generate commands that
                perform the work. A request is 'done' when all of the generated tasks have
                successfully completed. </para>
            <para> The MedCommons Network has a two-tiered structure. The Application Request
                Service defines a set of tasks that are meaningful to users such as performing an
                eReferral, eTelegram, or a patient asking for a copy of a DICOM study. Application
                Requests are typically created by the user's interaction with an application. The
                Platform level commands are lower-level and perform tasks that are
                machine-to-machine. A platform level command might move a data object from one
                gateway to another or force a gateway to update its software to the current release.
                Platform level commands are issued only by MedCommons services or third party
                services that have been given credentials by MedCommons. <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/RequestCommandLayers.jpg"/>/&gt;
                    </imageobject>
                </mediaobject>
            </para>
            <para/>
            <para> Application layer commands generate application layer tasks. Application layer
                tasks generate platform layer commands <emphasis>do</emphasis> things. For example: <orderedlist>
                    <listitem>An eReferral request is made by a user for surgical planning with the
                        images from a DICOM study. A CCR is generated by an application which
                        contains all of the information for the referral.</listitem>
                    <listitem> The eReferral request generates several tasks: copy study to the
                        specified surgeon &gt;Destination&lt; as specified in the CCR, copy
                        the CCR itself to this doctor; notify the surgeon that the study is
                        available after the data transfer is complete. </listitem>
                    <listitem> Each of these tasks in turn generates one or more commands. If there
                        are (say) 5 series in this DICOM study then there are six data objects that
                        have to be transferred (including the CCR). If the objects must be copied in
                        two hops (both target and destination gateways are behind firewalls so an
                        intermediate node is needed to hold the data) then there are 12 generated
                        transfer commands. </listitem>
                </orderedlist> The following table shows the different properties of the application
                and platform level commands. <table frame="all" tocentry="1">
                    <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <tbody valign="top">
                            <row>
                                <entry>Description</entry>
                                <entry>
                                    <emphasis>Application commands</emphasis>
                                </entry>
                                <entry>
                                    <emphasis>Platform commands</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>Authorization</entry>
                                <entry>User-level; may be authenticated by outside source</entry>
                                <entry>MedCommons Node</entry>
                            </row>
                            <row>
                                <entry>HIPAA Log event generated?</entry>
                                <entry>Yes</entry>
                                <entry>No</entry>
                            </row>
                            <row>
                                <entry>Tracked by user?</entry>
                                <entry>Yes</entry>
                                <entry>Not directly. Progress updates may be posted back to the
                                    application command service.</entry>
                            </row>
                            <row>
                                <entry>Parameter Types</entry>
                                <entry>CCR (or CCR fragments)</entry>
                                <entry>MedCommonsCommand</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>
            <para> There are several rationales for this dual-level design: <itemizedlist>
                    <listitem> We want the application layer to not care how tasks are done. For
                        example - performing an eReferral of a DICOM study with three series sent to
                        two two doctors may involve sending these three data objects to two
                        different gateways. For one target doctor the data might be placed on a
                        hosted service; for the other it is pushed to a gateway in that doctor's
                        home office. The Application Command Service takes the CCR defining the
                        referral as input, parses it to discover the target destination, and creates
                        platform commands to transfer the bits to the target user's gateway. <itemizedlist>
                            <listitem>Note that there may be multiple gateways involved for the
                                transfer hops themselves (depending on speed, firewalls,
                                &amp;etc.) that the user does not care about - it only wants the
                                Application Command Service to choose the fastest or cheapest route. </listitem>
                            <listitem> Also, data may be routed to multiple locations in encrypted
                                form because we don't know where the target user will access their
                                files (from the hospital's or at their home's gateway)</listitem>
                            <listitem> Logging and status notification are also different for the
                                two cases. At the Application layer these must make sense to a user;
                                at the platform level these are purely used to manage/monitor the
                                state of execution. </listitem>
                            <listitem> Services are located in different locations. A platform level
                                command interpreter is located on each gateway node (both repository
                                and enterprise); the application level is hosted at a more
                                centralized location. </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem> Authorization and authentication for these two layers is very
                        different. At the application layer the authentication focusses on the user;
                        users might be authenticated by MedCommons or by a third party via SAML. At
                        the platform layer only MedCommons Node authentication and authorization is
                        used (the "Circle of Trust" only includes nodes controlled by MedCommmons). </listitem>
                    <listitem> Although all commands and transfers are encrypted the Application
                        Command Service may not be part of the open source distribution. </listitem>
                    <listitem>
                        <para>In the distant future we may need a very flexible error handling
                            capability. For example - if the platform-layer commands are failing
                            because (say) a machine used as an intermediate storage location is
                            offline then a service might cancel relevant sequences of platform-layer
                            commands and regenerate new ones with a strategy to bypass this failing
                            MedCommons node. </para>
                        <para> Although something complex could be done here - a simple fallback
                            would be to mark that gateway as not available, cancel the requests
                            going through that gateway, and then regenerating commands for all of
                            the outstanding requests that had been routed through that node. </para>
                    </listitem>
                    <listitem> The application layer commands may be much more in flux than the
                        platform layer commands over the next few months; factoring this way makes
                        it possible to build a solid substrate. </listitem>
                </itemizedlist>
            </para>
            <para>Details of the Application requests and tasks are in SS-0004
                Application_Requests_And_Tasks and the command interpreter is defined in SS-0005
                Command_Interpreter.</para>
        </sect2>
        <sect2>
            <title>Security</title>
            <para> Delegation of authorization; roles. Stuff like that. Refer to document SS-000X ,
                SS-000Y, &amp;etc. for details (TBD). </para>
        </sect2>
        <sect2>
            <title>Other protocols</title> SNMP, Zabbix, BigBrother, ...</sect2>
    </sect1>
    <sect1>
        <title>Data Flow view of system</title>
        <para> Each of the following items needs either a paragraph or (preferably) a sequence
            diagram. The first few are user data flows; the latter ones are low level
            machine-to-machine ones. Message vs. data flow. <itemizedlist>
                <listitem>User Registration</listitem>
                <listitem>Login</listitem>
                <listitem>Patient Desktop actions</listitem>
                <listitem>WADO viewer actions</listitem>
                <listitem>Generate eReferral</listitem>
                <listitem>DICOM study import</listitem>
                <listitem>HL7 report import</listitem>
                <listitem>DICOM study transfer</listitem>
                <listitem>CCR editing</listitem>
                <listitem>XDS document registration</listitem>
                <listitem>XDS document retrieval</listitem>
                <listitem>Gateway (Server?) registration</listitem>
                <listitem>Server Software update</listitem>
            </itemizedlist>
        </para>
        <sect2>
            <title>Submitting an eReferral </title>
            <para>
                <orderedlist>
                    <listitem>The application editing the CCR (typically some application running on
                        the patient desktop) is told by the user that the document is 'final'. There
                        is no tracking number in the CCR at that time.</listitem>
                    <listitem>When the user hits 'submit' the CCR is submitted to the Application
                        Request Service] together with the consent document. This service does the
                        following: validates the CCR against the schema; validates the contents (in
                        the sense that it can - it tests things like can this eReferral be routed to
                        the correct location, &amp;etc). </listitem>
                    <listitem>If the CCR passes the Central validation step then it is sent to the
                        target repository's validation service (there is one repository in each
                        e-group that will host this service). The CCR is evaluated there for policy
                        evaluation (e.g., does the e-group sending this referral have permission to
                        do so?)</listitem>
                    <listitem>If the CCR is OK a tracking number is inserted into it and it is sent
                        to the destination of the , it is signed by MedCommons central, and both the
                        CCR and consent are returned to the application signed by central. </listitem>
                    <listitem> The application then signs both documents with the user's credentials
                        and uploads it them to a repository. </listitem>
                </orderedlist> Ideally the transactions between remote nodes are bundled to minimize
                latency. </para>
            <para> Put diagram here. </para>
            <para> Note that this service itself must be either extensible or have the ability to be
                'chained' - this is also the location that a hook for decision support would be
                inserted. </para>
        </sect2>
    </sect1>
    <sect1>
        <title>Summary API Table</title>
        <para> The following table is a very terse and compressed view of interactions within the
            system. It's not clear that this is the best presentation of these details. The general
            idea is that we want to specify the main gestures of the API and what their security
            assumptions/restrictions are. Many of the parameters needed are dealt with here
            abstractly - they are (or will be) defined elsewhere. Perhaps in the longer run this
            table could be generated from other more formal definitions of the functions and
            parameters in other documents. But for now - this is a quick overview of the modules ts
            and what 'commands' between these modules are </para>
        <para> Sometimes the 'Service' below is labelled with E-Gateway, R-Gateway, or Central. This
            is an artifact of editing the document - these will all be mapped to services; the
            Enterprise Gateway, Repository Gateway, and Central are all composed of some set of
            services. This will be cleaned up as the document is improved. </para>
        <para> Details missing from this table on purpose: <itemizedlist>
                <listitem>WADO actions. There are a number of them - but we'll assume that once the
                    user for WADO is authenticated and if they have been authorized to use WADO that
                    the rest of the commands (magnify, window/level, &amp;etc.. all just follow
                    here) </listitem>
                <listitem> Repository gateway login/logout. All login/logout is handled by Central
                    services. </listitem>
                <listitem> CCR editing. This is an internal function to a MedCommons Repository
                    Gateway; in this table we're only concerned about uploading CCRs and viewing
                    CCRs. The editing is assumed to happen with a rich API inside of a module before
                    the CCR is committed to a Repository Gateway. </listitem>
            </itemizedlist>
        </para>
        <para>Definitions of all APIs (user-driven and machine-driven) in the MedCommons universe. <orderedlist>
                <listitem>Service: the name of the service that supports the specified API call</listitem>
                <listitem>Command/Parameters - name of the command, abstract list of parametersr</listitem>
                <listitem>Identity. There are four quite distinct members of this column. <itemizedlist>
                        <listitem>On the enterprise gateway there are specific roles defined whose
                            membership is determined by the admin of that Enterprise Gateway. For
                            example: an institution might not permit patients to log into an
                            enterprise gateway. Administrators might not be able to view studies in
                            WADO. Doctors might not be able to update the software on a gateway.
                            Defined roles: U_CLERK, U_DOCTOR, U_ADMIN. </listitem>
                        <listitem>Open to users with MedCommonsID. This might be further broken down
                            into users with voluntary or provisional IDs. Defined values:
                            VOLUNTARY_ID, PROVISIONAL_ID, ANY_ID </listitem>
                        <listitem> For items where no ID is required the value NONE will be used.
                            This is for Screens/APIs like the user registration screen. </listitem>
                        <listitem> Machine Ids. These can take the following values: ENTERPRISE,
                            REPOSITORY, or ALL_GATEWAY. All gateways are assumed to have a valid
                            MedCommons key. This means that they are a formally registered server.
                            Key exchange establishes a legal relationship (put this elsewhere).
                        </listitem>
                    </itemizedlist> The relation between these two notions of identity is simple:
                    there is no relationship. The roles matter only on the local level of that
                    gateway. The MedCommons identifiers don't matter for actions on the Enterprise
                    Gateway. </listitem>
                <listitem>Authentication required. True or false. The type of authentication might
                    differ depending on context.</listitem>
                <listitem>Authorization</listitem>
                <listitem>The audit choices are HIPAA, ATNA, both HIPAA and ATNA, and NONE. ATNA
                    logs are defined by IHE - basically any action that the system is doing to data
                    or programs must be logged (software upgrades, transfer of data, &amp;etc.)
                    The HIPAA logs are for user-level logs. So - if a DICOM study with three series
                    is transfered there might be four ATNA entries (the CCR plus three series being
                    transferred) but only one HIPAA log (for the study as a whole) is recorded. </listitem>
                <listitem>Version is the version that the service/command row needs to be released
                    in.</listitem>
                <listitem>Synch/Asynch</listitem>
                <listitem>Comment</listitem>
            </orderedlist>
        </para>
        <table frame="all" tocentry="1">
            <tgroup cols="9" align="left" colsep="1" rowsep="1">
                <tbody valign="top">
                    <row>
                        <entry>
                            <emphasis>Service</emphasis>
                        </entry>
                        <entry>
                            <emphasis>Command/Parameters</emphasis>
                        </entry>
                        <entry>
                            <emphasis>User Identity</emphasis>
                        </entry>
                        <entry>
                            <emphasis>Authentication Required</emphasis>
                        </entry>
                        <entry>
                            <emphasis>Authorization Required</emphasis>
                        </entry>
                        <entry>
                            <emphasis>Audit</emphasis>
                        </entry>
                        <entry>
                            <emphasis>Version</emphasis>
                        </entry>
                        <entry>
                            <emphasis>Synch/Asynch<footnote>Synchronous returns result to calling
                                    function; Asynchronous provides a handle to query for
                                status</footnote>
                            </emphasis>
                        </entry>
                        <entry>
                            <emphasis>Comment</emphasis>
                        </entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Copy Request (Destination, params)</entry>
                        <entry>ALL_GATEWAY</entry>
                        <entry>Yes</entry>
                        <entry>Yes</entry>
                        <entry>ATNA</entry>
                        <entry>1.0</entry>
                        <entry>Asynchronous</entry>
                        <entry>Needs to return a transaction handle</entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>List Requests (params)</entry>
                        <entry>ALL_GATEWAY</entry>
                        <entry>Yes</entry>
                        <entry>Yes</entry>
                        <entry>ATNA</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Returns a list of transactions for a node. Might be filtered by time,
                            destination, or source</entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Check asynch status</entry>
                        <entry>ALL_GATEWAY</entry>
                        <entry>Yes</entry>
                        <entry>Yes</entry>
                        <entry>ATNA?</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Checks status of commands such as copy</entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Register User</entry>
                        <entry>NONE</entry>
                        <entry>NO</entry>
                        <entry>NO</entry>
                        <entry>ATNA?</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Used to generate unrestricted user accounts</entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Create Unrestricted User Password</entry>
                        <entry>NONE</entry>
                        <entry>NO?</entry>
                        <entry>NO?</entry>
                        <entry>ATNA (HIPAA too?)</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Creates password for unrestricted user account</entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Login Unrestricted User</entry>
                        <entry>NONE</entry>
                        <entry>NO</entry>
                        <entry>NO</entry>
                        <entry>ATNA, HIPAA</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Logs user into MedCommons Central. This in turm gives the user access
                            to a MedCommons Repository Gateway.</entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Logout Unrestricted User</entry>
                        <entry>ANY_ID</entry>
                        <entry>YES</entry>
                        <entry>YES</entry>
                        <entry>ATNA, HIPAA</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Logs user out of MedCommons Central. This in turm removes all user
                            access from all MedCommons Repository Gateways.</entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Modify Unrestricted User Password</entry>
                        <entry>VOLUNTARY_ID</entry>
                        <entry>YES</entry>
                        <entry>YES</entry>
                        <entry>ATNA, HIPAA</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Modifies password for unrestricted user account</entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Notify_Insecure(User, message)</entry>
                        <entry>ALL_ID</entry>
                        <entry>YES</entry>
                        <entry>YES?</entry>
                        <entry>?</entry>
                        <entry>1.0</entry>
                        <entry>Asynchronous</entry>
                        <entry>Notifies user (insecurely) with specified message. Message should not
                            contain PHI </entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Request for Copy<footnote>Need to resolve calling tree - is this from
                                gateway or from user? </footnote>
                        </entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry>Request to copy a data object as specified by a MedCommons
                        GUID</entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Request for Deletion</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry>Request to delete a data object as specifed by MedCommons
                        GUID</entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Reconcile User IDs</entry>
                        <entry>VOLUNTARY_ID</entry>
                        <entry>Yes</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry>Combines all user ids under a single voluntary id account. Is it
                            sufficient that they know the PINs/IDs/passwords (!) for all items they
                            are combining?</entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Get HIPAA entries</entry>
                        <entry>ANY_ID</entry>
                        <entry>YES</entry>
                        <entry>NO?</entry>
                        <entry>NONE?</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry> Gets a list of HIPAA entries for a given MedCommons User Id. Note
                            that the HIPAA entries can be entries on the data owned by a particular
                            MedCommons User <emphasis>or</emphasis> the data viewed by a MedCommons
                            User Id. The former is the typical case for a patient that is logged in
                            looking at their own files; the latter is the typical case for a
                            provider. </entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Register E-Gateway</entry>
                        <entry>U_ADMIN</entry>
                        <entry>YES</entry>
                        <entry>YES</entry>
                        <entry>ATNA</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Bootstrap process to register an e-gateway</entry>
                    </row>
                    <row>
                        <entry>Central</entry>
                        <entry>Register R-Gateway</entry>
                        <entry>U_ADMIN</entry>
                        <entry>YES</entry>
                        <entry>YES</entry>
                        <entry>ATNA</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Bootstrap process to register an R-gateway</entry>
                    </row>
                    <row>
                        <entry>E-Gateway</entry>
                        <entry>Register_Restricted_User</entry>
                        <entry>U_ADMIN</entry>
                        <entry>YES</entry>
                        <entry>YES</entry>
                        <entry>ATNA</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Used to generate restricted user accounts </entry>
                    </row>
                    <row>
                        <entry>E-Gateway</entry>
                        <entry>Create User Password</entry>
                        <entry>U_ADMIN</entry>
                        <entry>YES</entry>
                        <entry>YES</entry>
                        <entry>ATNA</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Creates password for restricted user account</entry>
                    </row>
                    <row>
                        <entry>E-Gateway</entry>
                        <entry>Modify User Password</entry>
                        <entry>U_ADMIN</entry>
                        <entry>YES</entry>
                        <entry>YES</entry>
                        <entry>ATNA</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Modifies password for restricted user account</entry>
                    </row>
                    <row>
                        <entry>E-Gateway</entry>
                        <entry>Login</entry>
                        <entry>NONE</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry>S</entry>
                        <entry>Logs user into Enterprise Gateway. This in turm gives the user access
                            to a single Enterprise Gateway.</entry>
                    </row>
                    <row>
                        <entry>E-Gateway</entry>
                        <entry>Logout</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry>Logs user out of Enterprise Gateway. This in turm removes all user
                            access from this Enterprise Gateway.</entry>
                    </row>
                    <row>
                        <entry>E-Gateway</entry>
                        <entry>Update Software</entry>
                        <entry>U_Admin</entry>
                        <entry>True</entry>
                        <entry>False</entry>
                        <entry>HIPAA (?), ATNA</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Updates software to new version. </entry>
                    </row>
                    <row>
                        <entry>E-Gateway</entry>
                        <entry>Copy (Destination, params)</entry>
                        <entry>U_Clerk, U_Doctor</entry>
                        <entry>True</entry>
                        <entry>False</entry>
                        <entry>HIPAA, ATNA</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Copy command</entry>
                    </row>
                    <row>
                        <entry>E-Gateway</entry>
                        <entry>Display WADO</entry>
                        <entry>U_Clerk, U_Doctor</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry>Displays WADO viewer</entry>
                    </row>
                    <row>
                        <entry>E-Gateway</entry>
                        <entry>Display Selection Screen</entry>
                        <entry>U_Clerk, U_Doctor</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry>Displays selection screen for documents to sent to repository
                        gateway</entry>
                    </row>
                    <row>
                        <entry>E-Gateway</entry>
                        <entry>Select document from selection screen</entry>
                        <entry>U_Clerk, U_Doctor</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry>Selects document(s) currently not in MedCommons Repository; launches
                            WADO. </entry>
                    </row>
                    <row>
                        <entry>R-Gateway</entry>
                        <entry>eReferral (CCR)</entry>
                        <entry>ANY_ID</entry>
                        <entry>TRUE</entry>
                        <entry>TRUE</entry>
                        <entry>HIPAA</entry>
                        <entry>1.0</entry>
                        <entry>Asynch</entry>
                        <entry>Generates an eReferral request from a CCR. CCR contains references to
                            all documents that are included in Referral, including consent
                        XML</entry>
                    </row>
                    <row>
                        <entry>R-Gateway</entry>
                        <entry>Display Patient Desktop</entry>
                        <entry>ANY_ID</entry>
                        <entry>TRUE</entry>
                        <entry>TRUE</entry>
                        <entry>ATNA?</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Displays Patient desktop folders, HIPAA logs, all tabs. </entry>
                    </row>
                    <row>
                        <entry>R-Gateway</entry>
                        <entry>Update Software</entry>
                        <entry>U_Admin</entry>
                        <entry>True</entry>
                        <entry>False</entry>
                        <entry>HIPAA (?), ATNA</entry>
                        <entry>1.0</entry>
                        <entry>Synchronous</entry>
                        <entry>Updates software to new version. </entry>
                    </row>
                    <row>
                        <entry>R-Gateway</entry>
                        <entry>Display WADO</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                    </row>
                    <row>
                        <entry>R-Gateway</entry>
                        <entry>Generate eReferral</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                    </row>
                    <row>
                        <entry>R-Gateway</entry>
                        <entry>Notify</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                    </row>
                    <row>
                        <entry>DICOM CSTORE SCP</entry>
                        <entry>Recieve DICOM objects</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry>Objects are CSTOREd to MedCommons from a DICOM source. Other
                            protocols may be supported in the future for accepting
                        documents.</entry>
                    </row>
                    <row>
                        <entry>DICOM CFIND SCP</entry>
                        <entry>Querry for DICOM objectst</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry>Objects are CSTOREd to MedCommons from a DICOM source</entry>
                    </row>
                    <row>
                        <entry>XDS Repository</entry>
                        <entry>XDS Provide and Register Document</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry>Document submissions via XDS protocol. Assumes that there is an XDS
                            registry that has been configured here. </entry>
                    </row>
                    <row>
                        <entry>XDS Repository</entry>
                        <entry>Document HTTP access</entry>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry>For XDS support: each document in the repository must be accessible
                            via HTTP. </entry>
                    </row>
                    <row>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                        <entry/>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect1>
    <sect1>
        <title>Extensibility of MedCommons Network</title>
        <para> The MedCommons network can be extended in different ways. </para>
        <sect2>
            <title>Adding new enterprise protocols</title>
            <para> The only currently supported external protocol is DICOM. HL7 may be supported in
                the near future - but there are many different flavors of HL7 that may require local
                customization. Other candidate protocols are X12 (for HIPAA compliant billing), ATNA
                (IHE's version of syslog). </para>
        </sect2>
        <sect2>
            <title>Adding new document types </title> Issues: importing the data and tagging it with
            the right metadata, display of the data in WADO viewer. <para>
                <itemizedlist>
                    <listitem>HL7 CDA. This is a very general category - specific entries may need
                        to made for radiology reports, discharge summaries, care record summaries.
                        Each may need its own stylesheet. Stylesheets may need to travel with the
                        document together with CSS files and associated images - or we may create
                        PDF versions of these upon import for display. There are two use cases for
                        these sorts of documents - inter-system data interchange (where the XML is
                        the preferred format) and display (where the PDF would win). Presumably if
                        we created a PDF at the enterprise of origin and transferred both the PDF
                        and the XML both use cases would be handled without needing the additional
                        XSL, CSS, and image files. </listitem>
                    <listitem> JPEG, TIFF, PNG, other image formats. Need an upload mechanism where
                        metadata would be attached. </listitem>
                </itemizedlist>
            </para>
        </sect2>
        <sect2>
            <title>Adding new request types and commands</title>
            <para> Commands and request types can only be added by consent of MedCommons. </para>
        </sect2>
        <sect2>
            <title>Adding new device types</title>
            <para> Gizmos imply two things. There must be an API to the repository that is web based
                (again - WebDAV is the main candidate here). The API between the gateway and the
                repository ideally would permit an easy alternative implementation of the gateway by
                device manufacturers. </para>
        </sect2>
    </sect1>
    <sect1>
        <title>Religious issues</title>
        <para> This section describes issues that need to be settled and/or designed around so that
            they can be settled later without changing other subsystems. </para>
        <sect2>
            <title>HIPAA logs</title>
            <para> Sometimes they are located on repositories; sometimes snapshots on fobs. If we
                don't put them at central *or* on a special repository gateway then we are creating
                a mess. Putting the HIPAA logs on central in standard databases is the only sensible
                alternative; don't think that Adrian agrees. </para>
            <para> HIPAA also mandates auditing and intrusion detection. Need room to put this in
                the system; might not call them "HIPAA Logs". </para>
        </sect2>
        <sect2>
            <title>Control of installations</title>
            <para> Adrian is fond of claiming that certain software we have no responsibilty for or
                no control over. This is problematic on a network that requires that all nodes to
                have secure communications. We need to be more precise about what 'no control' and
                'no responsibility' mean. </para>
        </sect2>
        <sect2>
            <title>Gateway definition</title>
            <para> Server vs. service vs. gateway. Gateway is useful term but may end up being used
                at the marketing level as any onramp/offramp for data to the MedCommons network -
                including slugs and fobs that may have very limited security and a completely
                different code base. Service fits the enterprise gateway adapter better than server.
            </para>
        </sect2>
        <sect2>
            <title>Support for XDS services</title> In the current architecture XDS would be
            supported in the Enterprise Gateway and not on the Repository Gateway. When an XDS
            Document Source issues a Provide and Register message the Enterprise Gateway will
            generate a Register message to the designated XDS Registry. No rules are yet in place
            for how (if) these documents are moved to repository gateways and registered on Central. </sect2>
        <sect2>
            <title>Missing procedures</title>
            <sect3>
                <title>User notification</title>
                <para> When there is a security breech or some privacy-related event - at what point
                    do we notify the user(s)? If (say) a doctor's two-factor authentication
                    mechanism is stolen - at what point do we lock down this account, who do we
                    notify (all patients seen by this doctor, only the ones we think might be
                    effected)? Who should the notification message come from - do we have a contract
                    with the doctors that forces them to send a message or makes it our
                    responsibility to send out a message on their behalf? </para>
            </sect3>
            <sect3>
                <title>Licenses and abuse of the system</title>
                <para> Need to describe licenses; how they can help prevent abuse. Need to define
                    abuse. Need mechanisms for detecting abuse. </para>
            </sect3>
        </sect2>
        <sect2>
            <title>TBD</title>
            <itemizedlist>
                <listitem> Temporary identifiers.</listitem>
                <listitem> Selection screen.</listitem>
                <listitem>Deep vs. shallow copies</listitem>
                <listitem>Access rules. Enterprise gateway vs. repository gateway.</listitem>
                <listitem>SSL certs/DNS</listitem>
                <listitem>Transitive Trust.</listitem>
                <listitem>Is there a MedCommons Kernel (need to define)? Do we have a plug-in
                    architecture? If so - what is the range of devices that we intend to
                    support?(slugs, fobs, cellphones, ...) </listitem>
                <listitem>Where are deletion rules, other system maintenance things
                defined</listitem>
            </itemizedlist>
            <sect3>
                <title>Patient locator service</title>
                <para> Bill suggests: There needs to be a central 'patient locator' service, or some
                    such human-oriented thing. I can't see how this works otherwise. When a patient
                    is registered, some space must be allocated on a gateway somewhere, and there
                    must be a way of increasing that storage, and ultimately either splitting a
                    patient across multiple gateways and/or consolidating onto a single gateway with
                    more space. I presume this is a central function. </para>
                <para> Sean replies: not sure about this - it's really a discussion about
                    requirements than design though. The tables we have beneath the data locator
                    service really could host data on lots of machines and the integration happens
                    on the repository gateways. Since the central table doesn't know anything about
                    who the data belongs to (this is a feature from a security point of view) we'll
                    need this data around. But - what are the requirements here? Are we trying to
                    build a in quota system (patients can't store more than 1GB data?) </para>
            </sect3>
        </sect2>
    </sect1>
    <appendix>
        <title>References</title>
        <para>Need to put in references for ATNA, other jargon standards.</para>
    </appendix>
</article>
