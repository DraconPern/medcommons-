<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article SYSTEM "MedCommonsDocbookExtensions.dtd">
<article>
    <title>Asynchronous Request and Command Requirements </title>
    
    <articleinfo>
        <invpartnumber>REQ-0012</invpartnumber>
        <revhistory>
            <revision>
                <revnumber>A</revnumber>
                
                <date>April 17, 2005</date>
                <authorinitials>SWD</authorinitials>
                <revdescription>Initial Draft</revdescription>
            </revision>
            
            
            
            
        </revhistory>
        <legalnotice>Copyright 2005 MedCommons, Inc.</legalnotice>
        
    </articleinfo>
    <sect1>
        <title>Overview</title>
        <para>
            The MedCommons network has a number of nodes that must act cooperatively. 
        </para>
        <para>
            While the initial system is fairly closed the goal of this subsystem is to permit third parties to extend the MedCommons application layer and for them to build their own systems and businesses on 
            top of the MedCommons platform.
        </para>
    </sect1>
    
    <sect1>
        <title>Request Requirements</title>
        <requirement id="REQUEST-0001">
            <reqTitle>Many user interactions in MedCommons can not be handled synchronously; a subsystem for managing asynchronous requests is required.</reqTitle>
            <reqDescription></reqDescription>
        </requirement>
        <requirement id="REQUEST-0002">
            <reqTitle>Requests must be driven by the CCR or CCR fragments.</reqTitle>
            <reqDescription>
                
                The CCR defines a clinical transfer of information; MedCommons uses this document as a limited declarative programming language.  
                Most of the parameters required for an eReferral are specified by the CCR. 
                Notification requests (if performed outside of a CCR context) must use the subset of the CCR that specifies the &gt;Destination&lt;.
                
            </reqDescription>
        </requirement>
        
        <requirement id="REQUEST-0003">
            <reqTitle>Request system must be finite but extensible</reqTitle>
            <reqDescription>
               The request system is not a general purpose language. The domain of the requests must be largely determined by the expressiveness of the CCR.
                We must anticipate additional functionality being added to MedCommons over time. One area of potential growth is for new services to be added in a structured way (for example - plugging in a decision
                support module).  Although in the short term all request modules are all written by MedCommons in the future requirements may be added to permit third party extensions.
            </reqDescription>
        </requirement>
        <requirement id="REQUEST-0004">
            <reqTitle>Status of requests must be meaningful to the users that submitted them</reqTitle>
            <reqDescription>
                User requests (say for an eReferral) must permit users to access the status of the request and the status values must be useful to that user. Intermediate results or error conditions from
                internal MedCommons components must be translated into terms appropriate for the user who issued the request.
            </reqDescription>
        </requirement>
        <requirement id="REQUEST-0005">
            <reqTitle>Requests can only be generated by users with the appropriate authorization</reqTitle>
            <reqDescription></reqDescription>
        </requirement>
        <requirement id="REQUEST-0006">
            <reqTitle>Requests must generate one or more commands to act on the request</reqTitle>
            <reqDescription></reqDescription>
        </requirement>
        <requirement id="REQUEST-0007">
            <reqTitle>Requests may be retrieved either one at a time or as a collection of related commands.</reqTitle>
            <reqDescription></reqDescription>
        </requirement>
        <requirement id="REQUEST-0008">
            <reqTitle>Command updates can be performed one at a time or in a batch</reqTitle>
            <reqDescription></reqDescription>
        </requirement>
        <requirement id="REQUEST-0009">
            <reqTitle>Request status must be logged</reqTitle>
            <reqDescription>
                Some go into a HIPAA log, some go into other logs for measuring QoS. 
                More detail needed here.
            </reqDescription>
        </requirement>
        <requirement id="REQUEST-0010">
            <reqTitle>Request mechanism must support security policies</reqTitle>
            <reqDescription>
                The request system must support security policies for authorization, authentication, and auditing. The policies
                that are enforced may differ depending on the request.
            </reqDescription>
        </requirement>
        
        
        
        
    </sect1>
    <sect1>
        <title>Command Requirements</title>
        <para>
           Each request can generate one or more commands for execution on nodes such as a gateway or gateway adapter.
        </para>
        <requirement id="COMMAND-0001">
            <reqTitle>
                Many nodes in the MedCommons system run under the control of other central serivices. 
                A command interpreter is required to provide a single module on a given node for execution of commands.</reqTitle>
            <reqDescription></reqDescription>
        </requirement>
        <requirement id="COMMAND-0002">
            <reqTitle>Commands can only be generated by MedCommons nodes that are authorized to do so.</reqTitle>
            <reqDescription>
            </reqDescription>
        </requirement>
        <requirement id="COMMAND-0003">
            <reqTitle>Commands are a finite but extensible set</reqTitle>
            <reqDescription></reqDescription>
        </requirement>
        <requirement id="COMMAND-0004">
            <reqTitle>Command status must permit appropriate decision-making about actions</reqTitle>
            <reqDescription>
                This needs to be worded better. Basically we need commands to report which errors are
                fatal, which can be retried, &amp;etc.  Eventually we want the application layer to be able to regenerate
                commands for an alternative 'plan' to execute the request if the initial attempt failed.
            </reqDescription>
        </requirement>
        
    </sect1>
    
    
</article>
