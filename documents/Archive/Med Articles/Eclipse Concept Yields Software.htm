<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<link rel="File-List" href="Eclipse%20Concept%20Yields%20Software_files/filelist.xml">
<title>Eclipse concepts yield reliable software</title>
<style>
<!--
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black}
 p.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:windowtext; margin-left:0in; margin-right:0in; margin-top:0in}
 table.MsoNormalTable
	{mso-style-parent:"";
	font-size:10.0pt;
	font-family:"Times New Roman"}
-->
</style>
<!--[if !mso]>
<style>
v\:*         { behavior: url(#default#VML) }
o\:*         { behavior: url(#default#VML) }
.shape       { behavior: url(#default#VML) }
</style>
<![endif]--><!--[if gte mso 9]>
<xml><o:shapedefaults v:ext="edit" spidmax="1027"/>
</xml><![endif]-->
</head>

<body>

<p class="MsoNormal"><b><span style="font-family: Verdana; color: black">Eclipse 
concepts yield reliable software </span></b></p>
<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" width="100%" style="width: 100.0%">
  <tr>
    <td style="padding: 0in">
    <p class="MsoNormal">
    <span style="font-size: 10.0pt; font-family: Verdana; color: black">By 
    Jochen Krause and Leif Frenzel <br>
    <a href="http://www.eetimes.com" style="color: #003399; text-decoration: underline; text-underline: single">
    EE Times </a></span><span style="color: black"><br>
    </span><span style="font-size: 10.0pt; font-family: Verdana; color: black">
    January 12, 2004 (10:45 AM EST) </span></td>
    <td valign="bottom" style="padding: 0in">
    <p class="MsoNormal" align="right" style="text-align: right">
    <span style="color: black">
    <a href="http://www.eetimes.com/article/printableArticle.jhtml;jsessionid=PJXAPI541MSNWQSNDBGCKHY?articleID=18310716&url_prefix=story&sub_taxonomyID=2251" style="color: #003399; text-decoration: underline; text-underline: single">
    <span style="text-decoration: none"><!--[if gte vml 1]><v:shapetype id="_x0000_t75"
 coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe"
 filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_s1025" type="#_x0000_t75" alt="" style='width:59.25pt;
 height:15.75pt'>
 <v:imagedata src="Eclipse%20Concept%20Yields%20Software_files/image001.gif"
  o:href="file:///C:\Documents%20and%20Settings\Bob\Desktop\Med\Eclipse%20concepts%20yield%20software_files\image001.gif"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=79 height=21
src="Eclipse%20Concept%20Yields%20Software_files/image001.gif" v:shapes="_x0000_s1025"><![endif]></span></a><a href="javascript:launcher('18310716')" title="Send" style="color: #003399; text-decoration: underline; text-underline: single"><span style="text-decoration: none"><!--[if gte vml 1]><v:shape
 id="_x0000_s1026" type="#_x0000_t75" alt="" style='width:53.25pt;height:15.75pt'>
 <v:imagedata src="Eclipse%20Concept%20Yields%20Software_files/image002.gif"
  o:href="file:///C:\Documents%20and%20Settings\Bob\Desktop\Med\Eclipse%20concepts%20yield%20software_files\image002.gif"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=71 height=21
src="Eclipse%20Concept%20Yields%20Software_files/image002.gif" v:shapes="_x0000_s1026"><![endif]></span></a></span></td>
  </tr>
  <tr>
    <td colspan="2" style="padding: 0in">
    <p class="MsoNormal"><span style="color: black">&nbsp;</span></td>
  </tr>
</table>
<p class="MsoNormal">
<span style="font-size: 10.0pt; font-family: Verdana; color: black">Eclipse has 
a strong reputation as a reliable and high-quality platform, the result of an 
agile development process with unit testing and refactoring as well as 
conceptualization of a flexible and extensible architecture. The need for 
reliable code can be satisfied using the principles and tools that have proved 
successful for Eclipse. As members of the Eclipse team, we have transferred 
these principles into the realm of Web universal interface (UI) development.</span></p>
<p class="MsoNormal">
<span style="font-size: 10.0pt; font-family: Verdana; color: black">The part of 
the Eclipse platform that provides the widgets (the atomic building blocks of 
user interfaces, like buttons, text fields, etc.) is SWT, for Standard Widget 
Toolkit. SWT is designed to be as thin as possible and is, in fact, nothing more 
than a direct bridge to the native widgets of the OS. For developers using SWT 
is just coding in Java.</span></p>
<p class="MsoNormal">
<span style="font-size: 10.0pt; font-family: Verdana; color: black">An analogous 
widget set for Web UI development is W4T, for WWW Windowing Toolkit. Like SWT, 
it hides the specifics of the target platform from the developer behind an 
all-in-Java API. The target client in this area is, of course, a Web browser, 
and the specifics consist primarily in the dialects of the likes of HTML or 
JavaScript that each of the browsers understands and renders correctly. (In 
contrast to SWT, W4T has to do more work because of the distributed nature of 
Web applications and the statelessness of HTTP.</span></p>
<p><span style="font-size: 10.0pt; font-family: Verdana">In UI development, 
there are many recurring tasks (like displaying a domain model structure on a 
tree viewer or in a table) that result in ever-the-same widget constructions. To 
facilitate coding in such situations, the Eclipse platform provides another tool 
kit for programmers: JFace. It employs SWT widgets in reusable components like 
viewers that can be easily configured to display domain models. The widget set (SWT) 
and the application tool kit (JFace) are clearly separated, and both are still a 
manageable size. It is surprisingly simple to learn to use them.</span></p>
<p><span style="font-size: 10.0pt; font-family: Verdana">When starting to build 
complex applications with W4T, we faced the decision of whether we should try to 
work as much functionality and convenience components as possible into the core 
library itself or if we should divide functionality into several layers.</span></p>
<p><span style="font-size: 10.0pt; font-family: Verdana">Learning from the 
Eclipse project, we decided not to put viewers and other complex components into 
the set of basic widgets. We avoided dependencies from the lower to the higher 
level and also aimed to clarify the workings of the higher-level components by 
describing them in tutorials and examples that are available in source code.</span></p>
<p><span style="font-size: 10.0pt; font-family: Verdana">A clear separation of 
layers is important for the reliability of the UI code in several respects: 
First, using a relatively small API on each layer makes it easier to find good 
solutions to problems on that level (or to find that the problem actually 
belongs to a different level) and increases the chances to end up with code that 
is easy to extend and debug. Second, if developers had the opportunity to 
(&quot;quick and dirty&quot;) introduce low-level code into passages that handle 
application-specific details, possible interference of that code with the smooth 
working of the run-time would impair the overall functioning of the system. This 
results almost inevitably in bugs that are difficult to find. The separation of 
layers reduces this risk by hiding away the low-level elements 
(platform-dependent code with SWT, HTML and scripts with W4T) from the 
higher-level application code.</span></p>
<p><span style="font-size: 10.0pt; font-family: Verdana">Apart from creating the 
user interface layout and connecting views and controls to the business logic 
layer, developers face a third challenge when building a complex user interface 
for an application. Let us call this the &quot;UI logic&quot; of the application. It 
consists of all synchronization and interaction that takes place between UI 
parts and is not immediately involved with the business logic.</span></p>
<p><span style="font-size: 10.0pt; font-family: Verdana">Think of an e-mail 
client as an example. The UI of such an application has several parts: a tree 
that represents inbox, outbox and other folders; a list of e-mails in the 
currently open folder; and a preview area that shows the currently selected 
e-mail as well as toolbars and drop-down menus. Depending on the type of the 
currently selected folder or the currently selected e-mail, toolbar buttons may 
be enabled or disabled. The Send button, say, will be disabled when the inbox is 
shown and enabled when displaying mail that is in the outbox. You click on a 
button called &quot;Show only new mail&quot; and several folders are excluded from the 
tree and the list of e-mails is filtered to show only the latest mails. Such 
behavior is called UI logic.</span></p>
<p><span style="font-size: 10.0pt; font-family: Verdana">Of course, implementing 
that logic is much more challenging with complex UIs (like the e-mail client) 
than with a traditional Web UI that has a flat structure with just some text 
fields and one submit button on it. Now, with widget-based Web development, 
complex user interfaces as we know them from desktop applications make their 
entry into the realm of Web UIs. And this is where UI logic and the techniques 
developed to handle it come in. We mention here only two of them briefly: 
refactoring and test-driven development.</span></p>
<p><span style="font-size: 10.0pt; font-family: Verdana">Once the UI is entirely 
built with Java components (as is the case with widget-based approaches), all 
source code manipulation tools that come with Eclipse can be applied to the code 
that describes the Web UI exactly as they are to any other Java code.</span></p>
<p><span style="font-size: 10.0pt; font-family: Verdana">For example, think of 
the type name of a custom widget you have created and used extensively in your 
application. There are now many places in the code where this type name is 
referenced. Renaming the component would require changing all these code 
passages, with the risk of forgetting one of them. With the Rename refactoring 
in Eclipse, all this is done automatically. This saves time, makes it possible 
to concentrate on more important aspects of the code and encourages a 
programming style that uses variable names to get the code self-documenting. And 
everything that adds to the readability of the code is at the same time a gain 
in maintainability and reliability.</span></p>
<p><span style="font-size: 10.0pt; font-family: Verdana">Based on the tools 
already contained in the Eclipse JDT (and in expectation of the public 
refactoring APIs that will come with the 3.0 release), we have created 
additional refactorings for more GUI-related tasks: for instance, extracting a 
custom panel with several components placed on it out of the component tree of a 
container, or transforming a container into a top-level container.</span></p>
<p><i><span style="font-size: 10.0pt; font-family: Verdana">Jochen Krause is 
co-founder and managing director and Leif Frenzel is senior architect at 
Innoopract Informationssyteme GmbH (Karlsruhe, Germa</span></i><span style="font-size: 10.0pt; font-family: Verdana">ny).</span></p>
<p class="MsoNormal">&nbsp;</p>

</body>

</html>
