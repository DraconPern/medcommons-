/**
 * MedCommons DDL Gant Build File
 */

includeTool << gant.tools.Ivy
ant.property(file:'build.properties')
ant.property(name:'mc.ivy.repo',value:"${System.properties['user.home']}/.mc")

ant.taskdef(name:"groovyc",classname:"org.codehaus.groovy.ant.Groovyc")

target ( 'init' : '' ) {
  println ant.project.toString() + " has " + ant.project.targets.size() + " targets"
  mkdir ( 'dir' : '${build.lib}' )
  echo ( 'message' : 'Initializing build ...' )
  ivy.configure ( 'file' : 'ivy-settings.xml' )
  ivy.retrieve ( 'sync' : 'true' , 'pattern' : '${build.lib}/[artifact].[ext]' )
  available ( 'file' : '${stage.lib}' , 'property' : 'stage.lib.present' )
}

target ( 'init-lib' : '' ) {
  depends ( 'init' )
  if(!ant.project.properties['stage.lib.present']) {
    mkdir ( 'dir' : 'build/dist/' )
    mkdir ( 'dir' : '${stage.lib}' )
    copy ( 'todir' : '${stage.lib}' ) {
      fileset( 'dir' : '${build.lib}' ) {
        // We don't need the groovy-all because we use groovy-min instead
        exclude( name: 'groovy-all*' )

        // These are not needed at runtime
        exclude( name: 'jsp.jar' )

        // stripes.jar is needed but it is embedded directly
        // in the localDDL.war
        exclude( name: 'stripes.jar' )
      }
    }
    signpacklibs()
  }
}

target ( 'sign-libs' : '' ) {
  available ( 'file' : '${stage.lib}' , 'property' : 'stage.lib.present' )
  signpacklibs()
}

target('version-check-applet':'') {
  mkdir(dir: 'build/versioncheck/classes')

  javac(srcdir: 'src/java/', debug: 'false', destdir: 'build/versioncheck/classes', includes: 'VersionCheckApplet.java', source: '1.2', target: '1.2')
}

/**
 * Generates the WAR file that is deployed on the server to allow
 * download of DDL jar files 
 */
target ( 'generate-war' : '' ) {
  depends ( 'pack-ddl-jar' , 'version-check-applet', 'build-webapp' )

  mkdir ( 'dir' : '${build.jnlp}' )
  copy ( 'todir' : '${stage.jnlp}/app' ) {
    fileset ( 'dir' : '${stage.lib}' ) {
      exclude ( name: 'groovy-all*' )
    }
  }
  copy ( 'toDir' : '${stage.jnlp}' ) {
    fileset ( 'dir' : 'etc/images' ) {
      include ( 'name' : '**/*.png' )
      include ( 'name' : '**/*.gif' )
      include ( 'name' : '**/*.jpg' )
    }
  }
  copy ( 'todir' : '${stage.jnlp}/app' ) {
    fileset ( 'dir' : 'build/versioncheck/classes' ) {
      include ( 'name' : '**/*.class' )
    }
    fileset ( 'dir' : 'build/dist' ) {
      include ( 'name' : '**/*.png' )
      exclude ( 'name' : '**/toolbar/*.png' )
    }
  }
  jar ( 'jarfile' : '${build.jnlp}/DDL.war' , 'basedir' : '${stage.jnlp}' )
}

target ( 'generate-index-files' : '' ) {
  depends ( 'build-timestamp' , 'update-version' )
  loadfile ( 'srcFile' : 'src/ddlversion.txt' , 'property' : 'buildVersion' )
  loadfile ( 'srcFile' : 'src/buildtime.txt' , 'property' : 'buildTime' )
  echo ( 'message' : 'Build version is ${buildVersion}' )
  delete ( 'quiet' : 'true' , 'file' : 'src/meta/war/index.html' )
  copy ( 'file' : 'src/meta/war/index_ddl_template.html' , 'tofile' : 'src/meta/war/index.html' ) {
    filterchain {
      striplinecomments {
        comment ( 'value' : '!' )
      }
      replacetokens {
        token ( 'key' : 'BuildTime' , 'value' : '${buildTime}' )
        token ( 'key' : 'BuildVersion' , 'value' : '${buildVersion}' )
      }
    }
  }
  delete ( 'quiet' : 'true' , 'file' : 'src/meta/war/UploadAccountFiles.html' )
  copy ( 'file' : 'src/meta/war/UploadAccountFiles_template.html' , 'tofile' : 'src/meta/war/UploadAccountFiles.html' ) {
    filterchain {
      striplinecomments {
        comment ( 'value' : '!' )
      }
      replacetokens {
        token ( 'key' : 'BuildTime' , 'value' : '${buildTime}' )
        token ( 'key' : 'BuildVersion' , 'value' : '${buildVersion}' )
      }
    }
  }
}
target ( 'cleanall' : '' ) {
  ant.delete ( 'dir' : 'build/stage' )
}
target ( 'signpackcore' : '' ) {
  if(ant.project.properties['ddl.unsigned']) 
    return

  ant.apply ( 'failonerror' : 'true' , 'executable' : 'signpack.sh' , 'osfamily' : 'unix' , 'type' : 'file' , 'resolveexecutable' : 'true' , 'ignoremissing' : 'false' ) {
    fileset ( 'dir' : '${stage.lib}' , 'includes' : 'medcommons-dicomclient-application.jar' )
    srcfile()
    arg ( 'value' : '${keystore.location}' )
    arg ( 'value' : '${keystore.password}' )
    arg ( 'value' : '${key.alias}' )
  }
  ant.apply ( 'failonerror' : 'true' , 'executable' : 'signpack.sh' , 'osfamily' : 'unix' , 'type' : 'file' , 'resolveexecutable' : 'true' , 'ignoremissing' : 'false' ) {
    fileset ( 'dir' : '${stage.lib}' , 'includes' : 'medcommons-uploadAccountFiles-application.jar' )
    srcfile()
    arg ( 'value' : '${keystore.location}' )
    arg ( 'value' : '${keystore.password}' )
    arg ( 'value' : '${key.alias}' )
  }

  ant.apply ( 'failonerror' : 'true' , 'executable' : 'signpack.bat' , 'osfamily' : 'windows' , 'type' : 'file' , 'resolveexecutable' : 'true' , 'ignoremissing' : 'false' ) {
    fileset ( 'dir' : '${stage.lib}' , 'includes' : 'medcommons-dicomclient-application.jar' )
    srcfile()
    arg ( 'value' : '${keystore.location}' )
    arg ( 'value' : '${keystore.password}' )
    arg ( 'value' : '${key.alias}' )
  }
  ant.apply ( 'failonerror' : 'true' , 'executable' : 'signpack.bat' , 'osfamily' : 'windows' , 'type' : 'file' , 'resolveexecutable' : 'true' , 'ignoremissing' : 'false' ) {
    fileset ( 'dir' : '${stage.lib}' , 'includes' : 'medcommons-uploadAccountFiles-application.jar' )
    srcfile()
    arg ( 'value' : '${keystore.location}' )
    arg ( 'value' : '${keystore.password}' )
    arg ( 'value' : '${key.alias}' )
  }
}
target ( 'compile' : '--> compiles source' ) {
  depends ( 'init-lib' , 'generate-index-files' )
  mkdir ( 'dir' : 'build/classes' )


  ant.groovyc(srcdir: 'src', destdir: 'build/classes') {
    classpath {
      fileset ( 'dir' : '${stage.lib}' ) {
        include ( 'name' : '*.jar' )
      }
      fileset ( 'dir' : 'build/dist/lib/' ) {
        include ( 'name' : 'stripes.jar' )
      }
      fileset ( 'dir' : 'build/dist' ) {
        include ( 'name' : 'medcommons-dicomclient-application.jar' )
        include ( 'name' : 'medcommons-dicomclient.jar' )
      }
    }
    javac ( 'debug' : 'true' , 'target' : '1.5' ) {
      classpath {
        fileset ( 'dir' : '${stage.lib}' ) {
          include ( 'name' : '**/*.jar' )
        }
      }
    }
  }
}
target ( 'test-module' : '' ) {
  depends ( 'spawn' )
  junit ( 'printsummary' : 'yes' , 'haltonfailure' : 'yes' , 'fork' : 'yes' ) {
    classpath {
      fileset ( 'dir' : '${stage.lib}' ) {
        include ( 'name' : '*.jar' )
      }
      fileset ( 'dir' : 'build/dist' ) {
        include ( 'name' : 'medcommons-dicomclient-application.jar' )
        include ( 'name' : 'medcommons-dicomclient.jar' )
      }
    }
    formatter ( 'type' : 'plain' )
    test ( 'name' : 'net.medcommons.application.dicomclient.test.WaitStartupTest' )
    test ( 'name' : 'net.medcommons.application.dicomclient.test.ContextManagerTest' )
    test ( 'name' : 'net.medcommons.application.dicomclient.test.UploadDICOMTest' )
    test ( 'name' : 'net.medcommons.application.dicomclient.test.ShutdownTest' )
  }
}

target(compiletests: 'compile and run junit tests') {
  depends(compile)

  mkdir(dir: 'build/test-classes')
  ant.groovyc(srcdir: 'test-src', destdir: 'build/test-classes') {
    classpath {
      pathelement(location: 'build/classes')
      fileset ( 'dir' : '${stage.lib}' ) {
        include ( 'name' : '*.jar' )
        exclude ( 'name' : 'medcommons-dicomclient-application.jar' )
        exclude ( 'name' : 'medcommons-uploadAccountFiles-application.jar' )
      }
    }
    javac(source : '1.5' , target : '1.5' , debug : 'on') {
      classpath {
        path ( refid : 'build_classpath' )
        pathelement(location: 'build/classes')
      }
    }
  }
}

target(tests: 'compile and run junit tests') {

  depends(compiletests)

  delete(dir: 'test-results')
  mkdir(dir:'test-results')
  ant.junit(printsummary: 'withOutAndErr',fork: 'yes', failureproperty: "unit_tests_failed") {
    classpath {
      pathelement(location: 'build/classes')
      pathelement(location: 'build/test-classes')
      fileset ( 'dir' : '${stage.lib}' ) {
        include ( 'name' : '*.jar' )
        exclude ( 'name' : 'medcommons-dicomclient-application.jar' )
        exclude ( 'name' : 'medcommons-uploadAccountFiles-application.jar' )
      }
    }
    formatter (type: 'plain')
    batchtest (todir: 'test-results') {
      fileset(dir: 'build/test-classes') {
        include(name: '**/*Test.class')
      }
    }
  }
  if(ant.project.properties.unit_tests_failed)
    throw new Exception("One or more JUnit tests failed!")
}



target ( 'signpacklibs' : '' ) {

  if(ant.project.properties['ddl.unsigned']) {
    println "***** SIGNING LIBRARIES IS DISABLED ******"
    return
  }

  def signpack = 'signpack.sh'
  if(System.properties['os.name'].indexOf("Windows") >= 0) {
    signpack = 'signpack.bat'
  }

  ant.apply( 'failonerror' : 'true' , 'executable' : signpack, 'type' : 'file' , 'resolveexecutable' : 'true' , 'ignoremissing' : 'false' ) {
    fileset ( 'dir' : '${stage.lib}' , 'includes' : '**/*.jar' , 'excludes' : '**/activ*.jar' )
    srcfile()
    arg ( 'value' : '${keystore.location}' )
    arg ( 'value' : '${keystore.password}' )
    arg ( 'value' : '${key.alias}' )
  }
}
target ( 'test-components' : '' ) {
  junit ( 'printsummary' : 'yes' , 'haltonfailure' : 'yes' , 'fork' : 'yes' ) {
    classpath {
      fileset ( 'dir' : '${stage.lib}' ) {
        include ( 'name' : '*.jar' )
      }
      fileset ( 'dir' : 'build/dist' ) {
        include ( 'name' : 'medcommons-dicomclient-application.jar' )
        include ( 'name' : 'medcommons-dicomclient.jar' )
      }
    }
    formatter ( 'type' : 'plain' )
    test ( 'name' : 'net.medcommons.application.dicomclient.utils.test.DicomNamesTest' )
  }
}
target ( 'build-timestamp' : '' ) {
  tstamp {
    format ( 'property' : 'build.buildtime' , 'pattern' : "EEE, MMM d 'at' yyyy HH:mm:ss z" )
  }
  tstamp {
    format ( 'property' : 'build.timestamp' , 'pattern' : 'yyyy-MM-dd HH:mm:ss' )
  }
  echo ( 'file' : 'src/buildtime.txt' , 'message' : '${build.buildtime}' )
  echo ( 'file' : 'src/timestamp.txt' , 'message' : '${build.timestamp}' )
}
target ( 'spawn' : '' ) {
  java ( 'spawn' : 'true' , 'classname' : 'net.medcommons.application.dicomclient.DICOMClient' , 'fork' : 'true' ) {
    jvmarg ( 'value' : '-Xmx256m' )
    jvmarg ( 'value' : '-Xdebug' )
    jvmarg ( 'value' : '-Xnoagent' )
    jvmarg ( 'value' : '-XX:MaxPermSize=128m' )
    jvmarg ( 'value' : '-Xrunjdwp:transport=dt_socket,server=y,address=4144,suspend=n' )
    arg ( 'line' : 'src/meta/war/app/DDL.properties' )
    arg ( 'line' : 'http://localhost:9080' )
    classpath {
      fileset ( 'dir' : '${stage.lib}' ) {
        include ( 'name' : '*.jar' )
      }
      fileset ( 'dir' : 'build/dist' ) {
        include ( 'name' : 'medcommons-dicomclient-application.jar' )
        include ( 'name' : 'medcommons-dicomclient.jar' )
      }
    }
  }
}

/**
 * Generates the locally deployed war file that is 
 * run on client computers with the DDL service.
 */
target ( 'generate-local-war' : '' ) {
  depends( 'compile')
  mkdir ( 'dir' : 'build/dist/classes' )
  war ( 'webxml' : 'etc/localDDL/WEB-INF/web.xml' , 'duplicate' : 'preserve' , 'destfile' : 'build/dist/localDDL.war' ) {
    classes ( 'dir' : 'etc/localDDL/WEB-INF/classes/' ) {
      include ( name : 'StripesResources.properties' )
    }
    classes ( 'dir' : 'build/classes' ) {
      include ( name : 'net/medcommons/application/dicomclient/http/action/*' )
    }
    lib ( 'dir' : 'build/stage/lib/' ) {
      include ( 'name' : 'jslt.jar' )
      include ( 'name' : 'standard.jar' )
      include ( 'name' : 'stripes.jar' )
    }
    lib ( 'dir' : 'build/dist/lib/' ) {
      include ( 'name' : 'stripes.jar' )
    }

    // Here we try to pick out only the needed parts of
    // dojo because the full thing is quite big
    // Unfortunately it turns out to be a lot
    // TODO:  replace all this with JQuery!
    fileset ( 'dir' : 'etc/localDDL/' ) {
      include ( 'name' : '*.html' )
      include ( 'name' : '*.smd' )
      include ( 'name' : '*.css' )
      include ( 'name' : '*.jpeg' )
      include ( 'name' : '*.jpg' )
      include ( 'name' : '*.gif' )
      include ( 'name' : '*.png' )
      include ( 'name' : '*.svg' )
      include ( 'name' : '*.js' )
      include ( 'name' : 'src/*.js' )
      include ( 'name' : 'images/*' )
      include ( 'name' : 'src/hostenv*' )
      include ( 'name' : 'src/bootstrap*' )
      include ( 'name' : 'src/loader*' )
      include ( 'name' : 'src/event/**' )
      include ( 'name' : 'src/io/**' )
      include ( 'name' : 'src/lang/**' )
      include ( 'name' : 'src/undo/**' )
      include ( 'name' : 'src/xml/**' )
      include ( 'name' : 'src/uri/**' )
      include ( 'name' : 'src/widget/__package__.js')
      include ( 'name' : 'src/widget/FilteringTable.js')
      include ( 'name' : 'src/widget/FilteringTable.js')
      include ( 'name' : 'src/widget/HtmlWidget.js')
      include ( 'name' : 'src/widget/DomWidget.js')
      include ( 'name' : 'src/widget/Manager.js')
      include ( 'name' : 'src/widget/Widget.js')
      include ( 'name' : 'src/widget/Parse.js')
      include ( 'name' : 'src/widget/Button.js')
      include ( 'name' : 'src/debug/**')
      include ( 'name' : 'src/namespaces/**')
      include ( 'name' : 'src/string/**')
      include ( 'name' : 'src/logging/**')
      include ( 'name' : 'src/i18n/**')
      include ( 'name' : 'src/calendar/nls/en-us/**')
      include ( 'name' : 'src/calendar/nls/en/**')
      include ( 'name' : 'src/date/**')
      include ( 'name' : 'src/math/**')
      include ( 'name' : 'src/html/**')
      include ( 'name' : 'src/rpc/**')
      include ( 'name' : 'src/lfx/**')
      include ( 'name' : 'src/collections/**')
      exclude ( 'name' : '**/.svn/**' )
    }
    fileset ( 'dir' : 'src/java/net/medcommons/application/dicomclient/http/jsp' ) {
      include ( 'name' : '**/*.js' )
    }
  }
}
target ( 'run' : '' ) {
  java ( 'classname' : 'net.medcommons.application.dicomclient.DICOMClient' , 'fork' : 'true' ) {
    jvmarg ( 'value' : '-Xmx256m' )
    jvmarg ( 'value' : '-Xdebug' )
    jvmarg ( 'value' : '-Xnoagent' )
    jvmarg ( 'value' : '-XX:MaxPermSize=128m' )
    jvmarg ( 'value' : '-Xrunjdwp:transport=dt_socket,server=y,address=4144,suspend=n' )
    arg ( 'line' : 'src/meta/war/app/DDL.properties' )
    arg ( 'line' : 'http://localhost:9080' )
    classpath {
      fileset ( 'dir' : '${stage.lib}' ) {
        include ( 'name' : '*.jar' )
      }
      fileset ( 'dir' : 'build/dist' ) {
        include ( 'name' : 'medcommons-dicomclient-application.jar' )
        include ( 'name' : 'medcommons-dicomclient.jar' )
      }
    }
  }
}
target ( 'build-webapp' : '' ) {
  mkdir ( 'dir' : '${stage.jnlp}' )
  copy ( 'todir' : '${stage.jnlp}' ) {
    fileset ( 'dir' : 'src/meta/war' )
    fileset ( 'dir' : 'etc/localDDL' ) {
      include ( 'name' : '*.css' )
    }
  }
  mkdir ( 'dir' : '${stage.jnlp}/lib' )
  mkdir ( 'dir' : '${stage.jnlp}/images' )
  copy ( 'todir' : '${stage.jnlp}/images' ) {
    fileset ( 'dir' : 'etc/images/toolbar' ) {
      include ( 'name' : '**/*.png' )
      include ( 'name' : '**/*.gif' )
      include ( 'name' : '**/*.jpg' )
    }
    fileset ( 'dir' : 'etc/localDDL/images' ) {
      include ( 'name' : '**/*.png' )
      include ( 'name' : '**/*.gif' )
      include ( 'name' : '**/*.jpg' )
    }
  }
  mkdir ( 'dir' : '${stage.jnlp}/WEB-INF/lib' )
  mkdir ( 'dir' : '${stage.jnlp}/WEB-INF/classes' )
  copy ( 'todir' : '${stage.jnlp}/WEB-INF/lib' ) {
    fileset ( 'dir' : 'build/dist/lib' ) {
      include ( 'name' : 'jnlp*.jar' )
      include ( 'name' : 'commons*.jar' )
      include ( 'name' : 'jslt.jar' )
      include ( 'name' : 'standard.jar' )
    }
  }
  copy ( 'todir' : '${stage.jnlp}/WEB-INF/classes' ) {
    fileset ( 'dir' : 'src/meta/war/app' ) {
      include ( 'name' : 'log4j.xml' )
    }
  }
}
target ( 'world' : '' ) {
  depends ( 'generate-war' )
}
target ( 'pack-ddl-jar' : '' ) {
  depends ( 'compile' , 'generate-local-war' )
  mkdir ( 'dir' : '${application.package.classes}' )
  pathconvert ( 'pathsep' : ' ' , 'property' : 'application.manifest.classpath' ) {
    path ( 'refid' : 'application.compile.path' )
    chainedmapper {
      flattenmapper()
      globmapper ( 'from' : '*' , 'to' : 'lib/*' )
    }
  }

  copy ( 'todir' : '${build.dist}' ) {
    fileset ( 'dir' : 'etc/images' ) {
      include ( 'name' : '**/*.jpg' )
      include ( 'name' : '**/*.png' )
      include ( 'name' : '**/*.gif' )
    }
  }

  jar ( jarfile : '${stage.lib}/medcommons-dicomclient-application.jar',
        basedir : '${application.package.classes}',
        excludes: 'net/medcommons/application/dicomclient/http/action/*' ) {

    manifest {
      attribute ( 'name' : 'Built-By' , 'value' : '${user.name}' )
      attribute ( 'name' : 'Class-Path' , 'value' : '${application.manifest.classpath}' )
      attribute ( 'name' : 'Main-Class' , 'value' : 'net.medcommons.application.dicomclient.DICOMClient' )
    }

    fileset ( 'dir' : 'etc/images' ) {
      include ( 'name' : '**/*.png' )
      include ( 'name' : '**/*.gif' )
      include ( 'name' : '**/*.jpg' )
    }
    fileset ( 'dir' : 'src/java/net/medcommons/application/dicomclient/http/web/WEB-INF' ) {
      include ( 'name' : '**/*.xml' )
    }
    fileset ( 'dir' : 'src/java/net/medcommons/application/dicomclient/http/web/WEB-INF' ) {
      include ( 'name' : '**/*.properties' )
    }
    fileset ( 'dir' : 'build/dist/' ) {
      include ( 'name' : '**/localDDL.war' )
    }
    fileset ( 'dir' : 'src/' ) {
      include ( 'name' : 'timestamp.txt' )
      include ( 'name' : 'ddlversion.txt' )
      include ( 'name' : 'buildtime.txt' )
    }
    fileset ( 'dir' : 'etc/conf' ) {
      include ( 'name' : 'log4j.xml' )
      include ( 'name' : 'startcom/**' )
    }
  }
  
  jar ( 'jarfile' : '${stage.lib}/medcommons-uploadAccountFiles-application.jar' , 'basedir' : '${application.package.classes}' ) {
    manifest {
      attribute ( 'name' : 'Built-By' , 'value' : '${user.name}' )
      attribute ( 'name' : 'Main-Class' , 'value' : 'net.medcommons.application.upload.UploadAccountFiles' )
    }
    fileset ( 'dir' : 'etc/images' ) {
      include ( 'name' : '**/*.png' )
      include ( 'name' : '**/*.gif' )
      include ( 'name' : '**/*.jpg' )
    }
    fileset ( 'dir' : 'src/' ) {
      include ( 'name' : 'timestamp.txt' )
      include ( 'name' : 'ddlversion.txt' )
      include ( 'name' : 'buildtime.txt' )
    }
    fileset ( 'dir' : 'etc/conf' ) {
      include ( 'name' : 'log4j.xml' )
    }
  }
  // ant.antcall ( 'target' : 'sign-pack-core' )
  println ant.project.toString() + " has " + ant.project.targets.size() + " targets"
  ant.project.targets.each { k,v ->
    println "$k => $v"
  }
  signpackcore()
  echo ( "append" : "false" , "file" : "version.xml" , "message" : '<?xml version="1.0" encoding="utf-8"?><version><rev>$$Rev: ${svn.revision} $$</rev></version>' )
}

target ( 'clean' : '' ) {
  delete ( 'dir' : 'build/jnlp' )
  delete ( 'dir' : 'build/classes' )
  delete ( 'dir' : 'build/dist/classes' )
  delete ( 'dir' : 'build/dist/localDDL.war' )
}

target ( 'run-dod' : '' ) {
  java ( 'classname' : 'net.medcommons.application.dicomclient.DICOMClient' , 'fork' : 'true' ) {
    jvmarg ( 'value' : '-Xmx256m' )
    jvmarg ( 'value' : '-Xdebug' )
    jvmarg ( 'value' : '-Xnoagent' )
    jvmarg ( 'value' : '-XX:MaxPermSize=128m' )
    jvmarg ( 'value' : '-Xrunjdwp:transport=dt_socket,server=y,address=4144,suspend=n' )
    jvmarg ( 'value' : '-DpopupDoDDialog=true' )
    jvmarg ( 'value' : '-DuseREST=false' )
    arg ( 'line' : 'src/meta/war/app/DDL.properties' )
    arg ( 'line' : 'http://localhost:9080' )
    classpath {
      pathelement ( 'path' : '.build' )
      fileset ( 'dir' : '${stage.lib}' ) {
        include ( 'name' : '*.jar' )
      }
      fileset ( 'dir' : 'build/dist' ) {
        include ( 'name' : 'medcommons-dicomclient-application.jar' )
        include ( 'name' : 'medcommons-dicomclient.jar' )
      }
    }
  }
}

target ( 'run-download' : '' ) {
  java ( 'classname' : 'net.medcommons.application.transfer.DownloadFileAgent' , 'fork' : 'true' ) {
    classpath {
      fileset ( 'dir' : 'lib' ) {
        include ( 'name' : '*.jar' )
      }
    }
    arg ( 'value' : 'http://localhost:9080/gateway/services/CXP2' )
    arg ( 'value' : '1013062431111407' )
    arg ( 'value' : '00e6c80bb7f863962c37312d98943ae1e6c03dec' )
    arg ( 'value' : 'Cache' )
  }
}
target ( 'update-version' : '' ) {
  if(ant.project.properties?.version?.noupdate) 
    return

  exec ( 'output' : 'src/ddlversion.txt' , 'executable' : 'svnversion' ) {
    arg ( 'value' : '.' )
  }
  loadfile ( 'srcFile' : 'src/ddlversion.txt' , 'property' : 'buildVersion' )
  echo ( 'message' : 'Build version is ${buildVersion}' )
}

target ( 'publish' : '' ) {
  depends ( 'generate-war' )
  ivy.publish ( 'overwrite' : 'true' , 'pubrevision' : '1.2.6' , 'resolver' : 'public' ) {
    artifacts ( 'pattern' : 'build/dist/[artifact].[ext]' )
  }
}

target ( 'run-upload' : '' ) {
  java ( 'classname' : 'net.medcommons.application.dicomclient.DICOMClient' , 'fork' : 'true' ) {
    jvmarg ( 'value' : '-Xmx256m' )
    jvmarg ( 'value' : '-Xdebug' )
    jvmarg ( 'value' : '-Xnoagent' )
    jvmarg ( 'value' : '-XX:MaxPermSize=128m' )
    jvmarg ( 'value' : '-Dcommand=upload' )
    jvmarg ( 'value' : '-Dcommand_storageid=1088448116240388' )
    jvmarg ( 'value' : '-Dcommand_auth=32d575dabf62b265892668054198bd4caff486a5' )
    jvmarg ( 'value' : '-Dcommand_cxphost=${cxp.host}' )
    jvmarg ( 'value' : '-Dcommand_cxpport=80' )
    jvmarg ( 'value' : '-Dcommand_cxpprotocol=http' )
    jvmarg ( 'value' : '-Dcommand_cxppath=/gateway/services/CXP2' )
    jvmarg ( 'value' : '-Dcommand_accountid=1117658438174637' )
    jvmarg ( 'value' : '-Dcommand_groupname=Demo Doctor Worklist' )
    jvmarg ( 'value' : '-DpopupDoDDialog=true' )
    arg ( 'line' : 'src/meta/war/app/DDL.properties' )
    arg ( 'line' : 'http://localhost:9080' )
    classpath {
      pathelement(location: 'build/classes')
      fileset ( 'dir' : '${stage.lib}' ) {
        include ( 'name' : '*.jar' )
      }
      fileset ( 'dir' : 'build/dist/lib' ) {
        include ( 'name' : 'stripes.jar' )
      }
      fileset ( 'dir' : 'build/dist' ) {
        include ( 'name' : 'medcommons-dicomclient-application.jar' )
        include ( 'name' : 'medcommons-dicomclient.jar' )
      }
    }
  }
}


ant.property ( 'file' : 'build.properties' )
ant.tstamp {
    format ( 'property' : 'cur-tstamp' , 'pattern' : 'M/d/yyyy h:m a' )
  }
ant.property ( 'file' : 'pack.properties' )
ant.property ( 'name' : 'mc.ivy.repo' , 'value' : '${user.home}/.mc' )
ant.property ( 'name' : 'application.package.classes' , 'value' : 'build/classes' )
ant.property ( 'name' : 'application.package' , 'value' : 'net.medcommons.application' )
ant.property ( 'name' : 'application.package.folder' , 'value' : 'net/medcommons/application' )
ant.property ( 'name' : 'application.package.files' , 'value' : '${application.package.folder}/**' )
ant.property ( 'name' : 'build.dist' , 'value' : 'build/dist' )
ant.property ( 'name' : 'build.jnlp' , 'value' : 'build/jnlp' )
ant.property ( 'name' : 'stage.jnlp' , 'value' : 'build/stage/jnlp' )
ant.property ( 'name' : 'stage.lib' , 'value' : 'build/stage/lib/' )
ant.property ( 'name' : 'build.lib' , 'value' : 'build/dist/lib' )
ant.path ( 'id' : 'application.compile.path' ) {
    fileset ( 'dir' : '${stage.lib}' ) {
      include ( 'name' : '**/*.jar' )
    }
  }
setDefaultTarget ( 'world' )
