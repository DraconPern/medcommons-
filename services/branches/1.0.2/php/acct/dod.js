/**
 * Core Javascript for DICOM upload to MedCommons
 * <p>
 * This code is heavily event driven based on events generated by the DDL via
 * its remote connection (see connectionManager.js).
 * <p>
 * The starting point is DDL detection code that looks for the DDL and after
 * a few seconds resolves whether it is there or not and sends corresponding events.
 * <p>
 * See the 'ddlStarted' event for the sequence that happens when DDL is recognized.
 * <p>
 * There are a number of variations of the upload forms, some of them very complex and
 * others ultra simple, omitting nearly all the components altogether.   To deal with this,
 * the code here needs to be robust to the fact that any given component might be missing 
 * for a given customized template.
 * 
 * Copyright MedCommons Inc., 2009-2010
 */
var transferKey = null;
var transferStarted = false;
var importStatus = null;
var originalImportLength = null;
var transfer = null;
var transferFinished = false;
var progressDisplayed = false;
var requiredDDLVersion = 0;
var ddlVersion = 0;
var restarting = false;
var enableAutoConnect = true;
var startedStatuses = ['Scanning','Importing','Uploading','Finished'];

var uploadOptions = {
    showPrevious : true
};

var consoleLog = log;

var logLines = [];
log = function(msg) {
    logLines.push(msg);
    if(logLines.length > 300)
        logLines.shift();
    consoleLog(msg);
};

connect(ddlEvents, 'restartRequired', function() {
    if(!restarting) {
        $('step1boxes').style.height = '8em';
	    appearX('restartDDLStep');
	    hide('detecting','waiting','installDDLStep');
    }
});

var allImports  = {};
connect(ddlEvents,'pong', function(response) {
    if(originalImportLength == null && response.imports) {
        originalImportLength = response.imports.length;
        log('Found ' + originalImportLength + ' existing imports');
        forEach(response.imports, function(i) {
            allImports[i.id] = i;
        });
    }
    else
    if(response.imports && response.imports.length && (importStatus || !allImports[response.imports[response.imports.length-1].id])) {
        
        importStatus = response.imports[response.imports.length-1];
        allImports[importStatus.id] = importStatus;

        log('received import status ' + importStatus.status + ' (transfer started = ' + transferStarted + ')' );
        
        if(importStatus.status == 'Error')
            signal(window,'transferError');
        else
        if(importStatus.status == 'Cancelled')
            signal(window,'transferCancelled');
        else
        if(findValue(startedStatuses,importStatus.status)>=0) { // import is started
            if(transferStarted) {
              signal(window,'transferProgress', response);
            }
            else {
              transferStarted = true;
              transferKey = importStatus.transferKey;
              saveUpload();
              signal(window,'transferStarted');
            }
        }
    }

    // Detect when a new transfer occurs
    if(transferStarted && response.transfers) {
        var txs = filter(function(tx) { return tx.key == transferKey; }, response.transfers);
        if(txs.length>0)
            transfer = txs[txs.length -1];
    }
});

function hideDDLDetectionStep() {
    blindUp('step1boxes',{duration:0.5});
}

/**
 * Allow embedding pages to define a function that 
 * selectively abandons saves.  Used to ensure
 * that if a user comes back with a new callers order
 * reference that they get a new page not a saved one
 * in DODX.
 */
function isSaveRestorable(upload) {
    return true;
}

function showStartSection(sec) {
    forEach($$('#step1boxes .startsec'), function(div) {
        if(div.id == sec) {
            appearX(div);
        }
        else {
            hide(div.id);
        }
    });
}

function hasUsableSavedUpload() {
    var upload = getSavedUpload();
    if(!upload || !response.imports) 
        return false;
        
    log("Found existing upload " + upload.key);
    var is = filter(function(i) { return i.transferKey == upload.key;}, response.imports);
    if(is.length == 0) { 
        log("Existing upload "+ upload.key + " was not found in known uploads for active DDL");
        return false;
    }
    
    if(!isSaveRestorable(upload)) {
        log("Existing upload "+ upload.key + " was determined not to be restorable");
        return false;
    }
    
    return true;
}

function checkExistingUpload() {
    var upload = getSavedUpload();
    if(!upload || !response.imports) 
        return;
        
    log("Found existing upload " + upload.key);
    var is = filter(function(i) { return i.transferKey == upload.key;}, response.imports);
    if(is.length == 0) { 
        log("Existing upload "+ upload.key + " was not found in known uploads for active DDL");
        return;
    }
    
    if(!isSaveRestorable(upload)) {
        log("Existing upload "+ upload.key + " was determined not to be restorable");
        return;
    }
    
    // We have to initialize the whole state as if import had started
    importStatus = is[0];
    transferKey = upload.key;
    patient = { patientMedCommonsId: upload.patientMedCommonsId, auth: upload.auth };
    gwUrl = upload.gwUrl;
    healthUrl = upload.healthUrl;
    transferStarted = true;
    originalImportLength = 0;
    
    hideDDLDetectionStep();
    connectUploadEvents();
    signal(window,'transferStarted');
    forEach(["#selectDataHeader img","#fillOutFormHeading img","#wholeStep1 h3 img"], function(expr) {
        var toShow = $$(expr);
        if(toShow.length > 0)
		    removeElementClass(toShow[0],"hidden");
    });
    
    if(findValue(['Finished','Cancelled','Error'],importStatus.status)>=0) {
        log("Existing upload is in a completed state");
        printed = true;
        $('progress').innerHTML = importStatus.status;
	    removeElementClass('restartButton','hidden');
	    log("signalling complete");
	    signal(window,'uploadFinished');
	    signal(ddlEvents,'uploadFinished');
    }
    else {
        log("Existing upload is in an active state");
	    removeElementClass('inprogressMessage','hidden');
                
        $('progress').innerHTML = 'Synchronizing ...';
    }
    checkForVoucher(showVoucherDetails);
}

function saveUpload() {
    var values = { 
            key: transferKey, 
            patientMedCommonsId: (patient?patient.patientMedCommonsId:null), 
            auth: (patient?patient.auth:null),
            
            gwUrl: gwUrl,
            healthUrl: healthUrl
        };
    
    if(typeof(extraCookieValues) != 'undefined')
        update(values,extraCookieValues);
        
    var c = '';
    for(i in values) {
        if(c!='')
            c += ',';
        c += i + '=' + values[i];
    }
    var expires = new Date( (new Date()).getTime() + (24 * 60 * 60 * 1000) );
    setCookie('upload',c, expires);
}

function getSavedUpload() {
    var u = getCookie('upload');
    if(!u)
        return null;
    var upload = {};
    forEach(u.split(','), function(kvp) {
        kvp = kvp.split('=');
        upload[kvp[0]] = kvp[1];
    });
    return upload;
}

function onQueryIdResponse(result) {
    if(result.status != 'ok') {
        alert("A problem occurred while querying your installed DDL for it\'s identity."
             + "This may happen if you answered 'No' to a security prompt from your DDL."
             + "Please reload this page and try again.  The error returned was:\n\n"+result.error);
             return;
    }
    ddlId = result.result.queryid.id;
    // Expire 365 days from now
    var expires = new Date((new Date()).getTime() + (365 * 60 * 60 * 1000));
    setCookie('ddlid', ddlId,expires,'/');
}

connect(ddlEvents, 'ddlStarted', function() { 
    
    clearTimeout(versionCheckTimerId);
    hideAllStep1();
    
    sendCommand("queryid", {ddlid: ddlId,  jsonp: 'onQueryIdResponse',gwUrl: localGatewayRootURL+'/gateway/services/CXP2'});
    
    if(hasUsableSavedUpload() && uploadOptions.showPrevious) {
	    appearX('foundDDL');
	    hide('connectingToDDL');
	    enable('submitUploadForm');
	    if($('showPrevious'))
    	    removeElementClass('showPrevious','hidden');
    }
    else {
        tick("startDDLHeading");
        transition("step1boxes","fillOutFormStep"); 
        hide('selectSourceStep');
        showCDInstructions();
    }
});


connect(ddlEvents, 'ddlStopped', function() {
    appearX('installDDLStep');
    hide('detecting','waiting','foundDDL','restartDDLStep','voucherDetailsStep');
    disable('submitUploadForm');
});

if($('nextLink')) {
  connect('nextLink', 'onclick', function(evt) {
      evt.preventDefault();
      // lightbox($('nextInstructions').innerHTML);
      var nextWin = window.open('dodnext.html','nextwin','width=500,height=300');
  });
}

function showCDInstructions() {
  if($('selectSourceStep'))
      blindUp('selectSourceStep',{duration:0.5}); 
  
  blindDown('cdinstructions',{duration:0.5, afterFinish: function() { $('cdinstructionlist').innerHTML += ' '; } });     
  
  if($('selectSourceStep'))
      fade('selectSourceStep',{duration:0.5});    
}
    
function tick(id) {
    if($(id))
        appendChildNodes($(id),SPAN({},' ',IMG({src:'images/greentick.gif', style:'padding-left: 10px;'})));
}

function transition(from, to, after) {
    blindUp(from,{duration:0.5}); 
    blindDown(to,{duration:0.5, afterFinish: after?after:function(){}});     
}

var patient = null;
var healthUrl = null;
var gwUrl = null;
var browsed = false;
var REQUIRED_JAVA_VERSION = "1.5";

var step1boxes = 
    [ 'installJavaStep', 'installDDLStep', 'foundDDL', 'installingJavaStep', 'restartDDLStep', 'waiting', 'detecting'];


var versionCheckTimerId = false;
var appletWaitStartTime = 0;

/**
 * Wrapper for MochiKit connect which gracefully doesn't connect if the target
 * object does not exist. 
 */
function connect() {
    var el = arguments[0];
    if(typeof el == 'string') {
        if(!$(el)) 
            return;
    }
    return MochiKit.Signal.connect.apply(window,arguments);
}

function launchDDLViaWebStart(evt) {
    if(evt)
        evt.preventDefault();
    
    launchApp($('startDDLUrl').value);
    
	if(!enableAutoConnect) {
        createProxyWindow();
        // Note: ping will already be running if autoconnect was set
	    setTimeout(pingDDL, 500);
	}
	
    hideAllStep1();
}

function createProxyWindow() {
    if(windowProxy)
        return;
    
    var pos = {
        x: (document.all)?window.screenLeft:window.screenX,
        y: (document.all)?window.screenTop:window.screenY
    };
    
	windowProxy = window.open(localGatewayRootURL.replace("https","http")+"/acct/ddl_command_window.html",
	        'ddlcommandproxy', 'location=no,menubar=no,status=no,scrollbars=no,toolbar=no,width=40,height=4'
	        +',top='+pos.y + ',screenY='+pos.y
	        +',left='+pos.x + ',screenX='+pos.x
	        );
	setTimeout(function(){
    	windowProxy.blur();
    	window.focus();
	},100);
	
	connect(window,'onunload',function() {
	    if(windowProxy) {
	        ce_signal('ddl_close_window');
	    }
	});
}

addLoadEvent(function() {

    roundElement('helpers');
    
    connect('continueFillOutFormButton','onclick',function() {
        transition("step1boxes","fillOutFormStep"); tick("startDDLHeading");
        if(!($('selectSourceStep')))
            show('cdinstructions');
    });
    
    
    var step1height = 0;
    forEach(step1boxes, function(s) { step1height = Math.max(step1height,elementDimensions(s).h)});
    
    /*
    forEach([ 'installJavaStep', 'installDDLStep', 'foundDDL', 'installingJavaStep', 'restartDDLStep', 'waiting', 'detecting'], function(s) {
        $(s).style.height = step1height + 'px';
    });
    */
    
    $('step1boxes').style.height = '115px';
    
    connect($$('#helpbar a')[0], 'onclick', showProblemForm);
    
    versionCheckTimerId = setTimeout(function() {
        if(!webstartVersionCheck(REQUIRED_JAVA_VERSION))
            startVersionCheckApplet();
    },enableAutoConnect ? 2000: 500);
    
    
    connectDDL();
    
    connect('installJavaButton', 'onclick', function() {
        window.open('http://jdl.sun.com/webapps/getjava/BrowserRedirect?locale=en&host=java.com','needjava','width=800,height=600,resize=true,scroll=true');
        hideAllStep1();
        appearX('installingJavaStep');
    });
    
    connect('javaInstallFinished', 'onclick', function() {
        window.location.reload();
    });
    
    forEach(['startDDLLink','startDDLAnyway'], function(btn) {
	    connect(btn, 'onclick', launchDDLViaWebStart);
    });
    
    connect('connectDDLButton', 'onclick', function() {
        createProxyWindow();
	    hide('connectDDLButton');
	    show('connectingToDDL');
        ce_connect('ddl_command_window_ready',function() {
    	    pingDDL(null,6000);
    	    var conn = connect(ddlEvents,'pingTimeout', function() {
    	        hide('connectingToDDL');
    	        show('unableToConnectMsg');
    	        show('installDDLStep');
    	        disconnect(conn);
    	        connect('startDDLLink','onclick', function() {
    	            hide('unableToConnectMsg');
    	        });
    	    });
        });
    });
   
	connect('submitUploadForm','onclick', selectCDFolder);
	
    connect('cancelUploadButton','onclick', function() {
        sendCommand('cancelUpload',{jsonp: 'cancelledUpload', transferKey: transferKey});
    });
    
    connect('submitProblem', 'onclick', function(evt) {
        var problemId = (new Date()).getTime() + '' + Math.round(Math.random()*10000);
        document.supportForm.problemId.value = problemId;
        evt.preventDefault();
        log("Sending problem info for id " + problemId);
        $('submitProblem').disabled = true;
        execJSONRequest('/router/ProblemReport.action', queryString(document.supportForm), function(response) {
            if(response.status == "ok") {
                if(ddlRunning) {
              execJSONRequest('/router/ProblemReport.action', {jslog:true,problemId:document.supportForm.problemId.value, description: logLines.join('\n')}, function(){});
                  sendCommand("uploadlog", {problemId:problemId, to: localGatewayRootURL + '/router/ProblemReport.action', jsonp:'logUploaded'});
                }
                else
                    logUploaded({status: "ok"});
            }
            else {
          noping = false;
            $('submitProblem').disabled = false;
                alert("A problem occurred in creating your problem report:\n\n" + response.error);
            }
        }, function(error) {
        $('submitProblem').disabled = false;
        genericErrorHandler(error);       
        });
    });
    
    if($('selectSourceStep')) {
        connect('restartButton','onclick', partial(cancelReload,true));
        connect('cdfolderButton', 'onclick', showCDInstructions);
        connect('showPreviousButton', 'onclick', function() {
            blindUp('fillOutFormStep');
            checkExistingUpload();
        });
    }
            connect(window,'startScanning', function() {
        pingIntervalMs = 4000;
        
        hide('browseFilesButton');
        $('cdinstructions').style.height = 'auto';
        appearX('scanningMsgBlock');
    });
    
    connect('browseFilesButton', 'onclick', function() {
        sendCommand("scanfolder", { jsonp: 'onScanResults'});
        
        disable('browseFilesButton');
 
        // Higher rate for better responsiveness!
        pingIntervalMs = 500;
    });
});

function connectDDL() {
    
    if(!enableAutoConnect) {
        log("Auto connect to DDL not enabled");
        setTimeout(diagnoseNotRunning,1000);
        return;
    }
    
    // Start the DDL communication process
    // by attempting to connect
    setTimeout(partial(pingDDL, diagnoseNotRunning,500));
}

function diagnoseNotRunning() {
    appletWaitStartTime = new Date().getTime();
    showInstallAdvice();
}

/**
 * Returns true iff the version check applet exists and is 
 * in the process of loading.
 * @return
 */
function isAppletLoading() {
    log("vcheck = " + $('vcheck'));
    if(!$('vcheck'))
        return false;
     
    try {
        log("document.vcheck.applet = " + document.vcheck.isActive());
        if(!document.vcheck.isActive()) {
	        log("Applet not loaded because vcheck.isActive() returned false");
            return true;
        }
    }
    catch(e) {
        log("Applet not loaded because vcheck.isActive() failed");
        return true;
    }
    
    try {
        log("document.vcheck.getVersion() = " + document.vcheck.getVersion());
    }
    catch(e) {
        log("Applet not loaded because vcheck.getVersion() failed");
        return true;
    }
    return false;}

function showInstallAdvice() {
    
    if(isAppletLoading() && (new Date().getTime() - appletWaitStartTime < 10000)) {
        setTimeout(showInstallAdvice,200);
        return;
    }
    
    hideAllStep1();
    if(!ddlRunning) {
            
        try {
            
            if(!enableAutoConnect && !windowProxy && getCookie('ddlid')) {
                show('connectDDLStep');
            }
            else
	        if(webstartVersionCheck(REQUIRED_JAVA_VERSION)) {
	            appearX('installDDLStep');
	            // launchDDLViaWebStart();
	        }
	        else {
	            if(!navigator.javaEnabled())
	                $('installJavaMsg').innerHTML = 'We could not detect Java installed on your computer.';
	            
		        $('step1boxes').style.height = '14em';
	                    
	            appearX('installJavaStep');
	        }
        }
        catch(e) {
	        $('step1boxes').style.height = '14em';
            $('installJavaMsg').innerHTML = 'An error occurred while checking if Java is supported on your computer.  Please help us by filing a problem report.  It may help to reinstall Java on your computer.';
	                    
	        appearX('installJavaStep');
        }
    }
}

var sourceLocation = null;
var studies = [];
connect(commands,'scanfolderComplete',function(result) {
    
    pingIntervalMs = 4000;
    
    window.result = result;
    
    // Sleight of hand - sometimes we get events together and out of order.
    // It means we get the startScanning message and stopScanning message at the 
    // same time and the scanning message is shown / hidden in random order.
    // to avoid that, nudge the hiding so it always happens after the showing
    setTimeout(function() {hide('scanningMsgBlock');}, 10);

    if(result.status != 'ok') {
        alert('There was a problem scanning the folder you selected: \r\n\r\n' + result.error);
        show('browseFilesButton');
        enable('browseFilesButton');
        return;
    }
    
    execJSONRequest('/router/ddl?getResult', 'ddlid='+ddlId+'&key='+result.key+'&cmd=scanfolder', function(res) {
        
        if(res.status != 'ok') {
            alert('A problem occurred scanning your files:\n\n'+res.error);
            show('browseFilesButton');
            enable('browseFilesButton');
            return;
        }
        
        result = eval('x='+res.data);
        window.result = result;
        
        for(var i in result.studies) {
            studies.push(result.studies[i]);
        }
        
        if(studies.length == 0) {
            alert('No DICOM Images were found. Please try again.');
            show('browseFilesButton');
            enable('browseFilesButton');
            return;
        }
        
        sourceLocation = result.selectedLocation;
        if(!sourceLocation) {
            alert('No source location was selected.  Please try again.');
            show('browseFilesButton');
            enable('browseFilesButton');
            return;
        }
        
        if(result.patientNames.length > 1) {
            transition('cdinstructions','confirmPatients');
            var tbody = $$('#patientNamesTable tbody')[0];
            
            while(tbody.childNodes.length > 0) {
                removeElement(tbody.childNodes[0]);
            }
            
            var count = 0;
            forEach(result.patientNames, function(pn) {
                ++count;
                appendChildNodes(tbody, TR({}, TD({'class': 'patientCount'},count+'.'), TD(pn)));
            });
            disconnectAll('ackPatientsButton');
            disconnectAll('chooseAgain');
            connect('ackPatientsButton','onclick', function() {
                initScanResults(studies);
            });
            connect('chooseAgain','onclick', function() {
                addElementClass('scanningMsgBlock','hidden');
                hide('scanningMsgBlock');
                transition('confirmPatients', 'cdinstructions');
                sendCommand("scanfolder",{jsonp:'onScanResults'});
                
                // Higher rate for better responsiveness!
                pingIntervalMs = 500;
            });
            return;  
        }
        
        // Everything looks ok - initialize the form and show the next step
        initScanResults(studies);
    });

});


function initScanResults(studies) {
    
    var study = studies[0];
    
    if($('sourceLocation'))
        replaceChildNodes($('sourceLocation'),sourceLocation);
    if($('patientName'))
        replaceChildNodes('patientName',study.patient.name);
    if($('voucherPatientName'))
        replaceChildNodes('voucherPatientName',study.patient.name);
    
    // If there is no data selection block at all, then skip straight to uploading
    if(!$('selectData')) {
        transition('wholeDataSourceStep','voucherDetailsStep');
        var params = {};
        if(typeof order != 'undefined')  {
            params.callers_order_reference = order.callers_order_reference;
        }
        if(groupAccountId) {
            params.groupAccountId = groupAccountId
        }
        startUpload(sourceLocation,{},'uploaddicom',params);
        return;
    }
    
    var options = map(function(s) {  return OPTION('Study -- ' + s.description); }, studies);
    options.splice(0,0,[OPTION('All Images Found')]);
    
    partial(replaceChildNodes,'studies').apply(window,options);

    replaceChildNodes('series', OPTION('Please Select a Study'));

    signal($('studies'),'onchange');
    
    transition('fillOutFormStep','patientDataBlock');
    tick('dicomSourceHeading');
    enable('beginUploadButton');
}

function populateSeries(study, append, seriesSelect) {
    if(!seriesSelect)
        seriesSelect = $('series');
    
    var options = [];
    for(var seriesUID in study.series) {
        var series = study.series[seriesUID];
        options.push(OPTION({value: seriesUID, selected:'true'},
                series.description + ' - ' + (series.date?formatLocalDateTime(new Date(series.date)):'Unknown Date')));
    }
    if(append)
        partial(appendChildNodes,seriesSelect).apply(window, options);
    else
        partial(replaceChildNodes,seriesSelect).apply(window, options);
}

connect('studies', 'onchange', function() {
    if($('studies').selectedIndex==0) {
        addElementClass('seriesRow','hidden');
        return;
    }
    
    var study = studies[ $('studies').selectedIndex-1];
    populateSeries(study);
    removeElementClass('seriesRow', 'hidden');
    replaceChildNodes('patientName',study.patient.name);
});

function onScanResults(result) {
    log('scan results command returned with status ' + result.status);   
}


function hideAllStep1() {
   hide.apply(window, step1boxes); 
}

function selectCDFolder() {
    sendCommand("selectfolder");
    pingIntervalMs = 1000;
    disable('submitUploadForm');
}

function getSelectedSeries() {
	var series = [];
    forEach($$('#series OPTION'),function(o) {
	    if(o.selected) 
		    series.push(o.value);
    });
    
    if(series.length == 0) {
	    // Send all by default if none selected
	    // if(!confirm('No series were selected - send entire study?'))
		//    return;
	    series = map(function(o) {o.value}, $$('#series OPTION'));
    }
    return series;
}


connect('beginUploadButton', 'onclick', function(result) {
    
    if($('termsOfUse') && !$('termsOfUse').checked) {
        alert('Please confirm that you have read and accepted the Terms Of Use by checking the box provided.');
        return;
    }
    
    pingIntervalMs = 3000;
    var params = {};
    if(typeof order != 'undefined')  {
        params.callers_order_reference = order.callers_order_reference;
    }
        
    transition('patientDataBlock','voucherDetailsStep');
    tick('selectDataHeader');
    
    if($('studies').selectedIndex != 0) {
      var series = getSelectedSeries();
      params.series = series.join(','); 
      log('sending series: ' + params.series);
    }
    
    startUpload(sourceLocation,'dicomUploadForm','uploaddicom',params);
    
});


function closeWindow() {
    var n = null;
    if(window.nextPage) {
        n = window.nextPage;
        n+=n.indexOf("?")<0?"?":"&";
        n+=queryString({callers_order_reference:callersOrderReference});
    }
	// Prevent print warning showing since they deliberately clicked 
	// close button
	printed = true;
    if(window.opener && (window.opener != window)) {
        if(window.next) 
            window.opener.location.href = n;
        window.close();
    }
    else 
    if(window.nextPage) {
        window.location.href = n;
    }
    else {
        // alert('You can close this window at any time. Long uploads will continue in the background.');
        var qs = parseQueryString(window.location.search);
        qs.step=2;
        window.history.back();
    }}

connect('closeButton', 'onclick', closeWindow);


function startUpload(sourceLocation, dataSource, action,  params) {
    
    disable('submitUploadForm');
    hide('transferError','transferError2');
    execJSONRequest('create_upload_patient.php',queryString(dataSource)+'&'+queryString(params),function(result) {
        log("XXXX: 4");
	    log("Got upload result: " + result.status);
	    hide('transferError');
	    browsed = true;
	    try {
	        if(result.status == 'ok') {
	            sendCommand(action, merge({ auth: result.authToken, 
	                                   gwUrl: result.gwUrl,
	                                   groupname: result.groupName,
	                                   groupAccountId: result.groupAccountId,
	                                   accountid: result.accid,
                            	       sourceLocation: sourceLocation,
	                                   storageid: result.patient.patientMedCommonsId,
	                                   jsonp: 'uploadStarted'}, params));
	            patient = result.patient;
	            gwUrl = result.gwUrl;
	            healthUrl = result.healthUrl;
	            saveUpload();
	            connectUploadEvents();
	        }
	        else {
	            log('submission failed: ' + result.error);
	            alert("There was a problem with your submission: \r\n\r\n" + result.error);
	            enable('submitUploadForm');
	        }
    	    renderHealthURL();
	    }
	    catch(e) { 
            enable('submitUploadForm');
	        dumpProperties("Failed to send command to DDL " , e);
	    }
	    
    });
    
    if($('selectDataStep')) {
        log("hiding select data step");
        blindUp('selectDataStep',{duration: 0.5});
    }
    
    showVoucherDetails();
} 

/**
 * Patched version of blinddown that restores height to auto
 * since this seems to help up IE in some situations.
 */
function blindDownX(id) {
	blindDown(id,{duration:0.5,afterFinish:function(){$(id).style.height='auto';}}); 
}

function showVoucherDetails() {
    if(patient && patient.auth)
	    renderHealthURL();
    if(getStyle('voucherDetailsStep','display') == 'none') {
        log('showing voucher details');
	    blindDownX("voucherDetailsStep"); 
    }
}

function logUploaded(response) {
    noping = false;
    $('submitProblem').disabled = false;
    
    if(response.status == 'ok') {
        hide('problemInputFields');
        show('problemResultFields');
        $('problemIdResult').innerHTML = document.supportForm.problemId.value;
    }
    else {
        alert("A problem occurred uploading your session log:\n\n"+response.error);
    }
}

// Called when user cancels actual upload (not selection dialog)
function cancelledUpload(result) {
    if(result.status == 'ok') {
        addElementClass('cancelUpload','hidden');
        removeElementClass('restartButton','hidden');
        printed = true; // hack: pretend they have already printed so they don't get a warning
        
        $('progress').innerHTML = 'Cancelled!';
    }
    else {
        alert('A problem occurred while cancelling your upload: \r\n\r\n' +
                result.error);
    }
}

function cancelReload(noSuppressPrint) {
    if(!noSuppressPrint)
	    printed = true;
    setCookie('upload','');
    window.location.reload();
}

function uploadStarted(result) {
    log('uploadStarted');
    
    // Note: DODX version doesn't go in here,
    // see dodx.tpl.php:onUploadDICOMResult if making changes
    
    if(result && result.status != 'ok') {
        alert('A problem occurred uploading the content you selected: \n\n' + result.error);
        enable('submitUploadForm');
        removeElementClass($('cancelUpload'),'hidden');
        disconnectAll(window, 'transferStarted');
        disconnectAll(window, 'transferProgress');
        disconnectAll(window, 'transferError');
        disconnectAll(window, 'transferCancelled');
        return;
    }
    else {
        removeElementClass('inprogressMessage', 'hidden');
    }
}

var voucherCheckInterval = null;
function connectUploadEvents() {
    
    connect(window,'transferStarted',function() {

        log("transferStarted event");
        
        vacuumContextManagerScripts();
        
        forEach($$("#selectDataHeader img"),function(i){removeElementClass(i,"hidden");});

        if(!voucherCheckInterval)
            voucherCheckInterval = setInterval(partial(checkForVoucher,-1), 4000);

        $('progress').innerHTML = importStatus.status + ' ...';

        connect(window, 'transferProgress', function(evt) {
            if(!transfer) {
                log('received transfer progress but no transfer in progress yet');
                return;
            }
            

            // Can't cancel while scanning
            if(importStatus.status != 'Scanning') 
              removeElementClass('cancelUpload','hidden');

            var tx = transfer;
            var studyCount = tx.queuedStudies + (tx.queuedStudies > 1 ? ' studies' : ' study');
            log("Got progress: " + tx.progress);

            
            if(importStatus.status == 'Scanning' && importStatus.message && importStatus.message != '') {
                $('progress').innerHTML = importStatus.message;
            }
            else
            if(tx.state == 'UPLOADING') {
                $('progress').innerHTML = '' + Math.floor(100 * Math.min(1.0,tx.progress)) + ' % of ' + studyCount;
                progressDisplayed = true;
                if((tx.progress >= 1) || importStatus.status == 'Finished')
                    uploadFinished();
            }
            else
            if(tx.state == 'SCANNING') {
                $('progress').innerHTML = 'Scanning files ... '+((tx.queuedStudies > 1) && (tx.queuedStudies) ?' ('+tx.queuedStudies+' studies found)':'');
            }
            else
            if(tx.state == 'ERROR') {
                $('progress').innerHTML = 'Error occurred!';
            }
        });
    });
    connect(window, 'transferError', function() {
        log("Transfer error");
        enable('submitUploadForm');
        var msg = 'A problem occurred with importing your selection.  Please try again. <br/><br/>'+escapeHTML(importStatus.message?importStatus.message:'No Message')
                 +'<br/><a href="javascript:cancelReload();">Cancel Upload</a>';
        $('transferError').innerHTML = msg;
        appear('transferError');
        
        if($('transferError2')) {
	        $('transferError2').innerHTML = msg;
	        appear('transferError2');
        }
    });
    connect(window, 'transferCancelled', function() {
        log("Transfer cancelled");
        enable('submitUploadForm');
        enable('browseFilesButton');
        
		if($('inprogressMessage'))
		    addElementClass('inprogressMessage', 'hidden');
        
		showCloseButtons();
		
        $('transferError').innerHTML = 'The file selection was cancelled.  Please try again.';
        appear('transferError');
    });
}

function showCloseButtons() {
    if($('closeButton')) {
        removeElementClass('closeButton','hidden');
        hide('restartButtonWrapper');
    }
}


function renderHealthURL() {
    log('rendering healthurl');
    
    var expires = new Date( (new Date()).getTime() + (24 * 60 * 60 * 1000) );
    setCookie('mc_anon_auth',patient.auth, expires, '/');
    
    hide('healthurlWait');
    
    if($('patientName')) {
      replaceChildNodes($('healthurl'), 
          A({href:healthUrl, target:'_new'},IMG({src:'images/hurl.png'})), 
          SPAN(' '),
          A({href:healthUrl, 'class':'obviousLink', target:'_new'},scrapeText($('patientName'))));
    }
    
    removeElementClass('healthurl','hidden');
    
    if(!$('selectData'))
        return;
    
    signal(ddlEvents, 'healthURLAvailable');
}



function uploadFinished() {

  log("Upload finished");
  
  renderHealthURL();
 
  addElementClass('cancelUpload','hidden');
  removeElementClass('restartButton','hidden');
  showCloseButtons();
  if($('nextButton')) 
      removeElementClass('nextButton','hidden');
  
  if($('inprogressMessage'))
	  addElementClass('inprogressMessage', 'hidden');
  if($('thankyouMessage'))
	  removeElementClass('thankyouMessage','hidden');
  if($('printInstructions'))
	  removeElementClass('printInstructions','hidden');
  if($('nextLink'))
	  removeElementClass('nextLink','hidden');
      
  // An extremely fast upload might finish without starting
  if(!transferStarted) {
      blindUp('selectDataStep',{duration: 0.5});
      blindDownX('voucherDetailsStep');
  }

  // If no transfer reported progress then set the progress manually
  // if(!progressDisplayed) {
      $('progress').innerHTML = 'Finished';
  //}

  if(!voucher) 
      checkForVoucher();
  
  disconnectAll(window,'transferProgress');
  
  signal(window,'uploadFinished');
  signal(ddlEvents,'uploadFinished');
}

var printed = false;
var voucher = null;
function checkForVoucher(callback) {
    execJSONRequest('query_patient_voucher.php', {accid: patient.patientMedCommonsId, auth: patient.auth}, function(result) {
        log('query patient result: ' + result.status + ' / voucher:  ' + (result.voucher?result.voucher.couponum:'null'));
        if(result.status == 'ok') {
            if(result.voucher) {
                voucher = result.voucher;
                // alert('Your voucher is : ' + result.voucher.voucherid + ' and your PIN is ' + result.voucher.otp);
                if($('voucherId'))
                    $('voucherId').innerHTML = voucher.voucherid;
                if($('voucherPin'))
                    $('voucherPin').innerHTML = voucher.otp;
                if($('patientName'))
                    $('patientName').innerHTML = voucher.patientname;
                signal(ddlEvents,'voucherDetailsAvailable');
                if($('printInstructions'))
	                removeElementClass('printInstructions','hidden');
                if($('printButton')) {
	                connect('printButton', 'onclick', function(evt) {
	                    evt.preventDefault();
	                    evt.stopPropagation();
	                    vacuumContextManagerScripts();
	                    printed = true;
	                    var printUrl = 'displayVoucher.php?t=print&accid='+patient.patientMedCommonsId+'&auth='+patient.auth+'&vcode='+result.voucher.voucherid;
	                    log('printing using url ' + printUrl);
	                    window.open(printUrl,'prtvoucher','width=500,height=500,toolbars=no');
	                    tick('voucherDetailsStepHeader');
	                    
	                });
                }
                window.onbeforeunload = function() {
                    if(!printed)
                       return "Please make sure you have printed this page or recorded your Voucher ID and PIN before leaving.  You will need these to enable the recipient to access your data.";
                };
                clearInterval(voucherCheckInterval);
                voucherCheckInterval = null;
            }
            if(callback && (callback != -1))
                callback(result.voucher);
        }
        else {
            log("Voucher query failed: " + result.error);
        }
    });
}

connect('restartDDLLink','onclick', function(evt) {
    disconnectAll(ddlEvents,'ddlStopped');
    evt.stopPropagation();
    evt.preventDefault();
    sendCommand("shutdown", { jsonp: 'onShutdown'});
});

function onShutdown() {
    hideAllStep1();
    restarting = true;
    appearX('restartingDDL');
    window.location.href = $('restartDDLLink').href;
} 


var detect = navigator.userAgent.toLowerCase();
var windowsIE = (checkPlatform("msie") && checkPlatform("win"));

function launchApp(jnlpUrl) {
    
    /*
    if(windowsIE) {
        var html = 
            "<OBJECT CODEBASE=http://java.sun.com/update/1.6.0/jinstall-6-windows-i586.cab CLASSID=clsid:5852F5ED-8BF4-11D4-A245-0080C6F74284 HEIGHT=0 WIDTH=0>\n"
            +"<PARAM NAME=app VALUE="+jnlpUrl+">\n"
            +"<PARAM NAME=back VALUE=false>\n"
            +"</OBJECT>";
        
        log("Launching using url: " + jnlpUrl + " and code block: " + html);
        
        var jreDiv = DIV({});
        appendChildNodes($('jre'),jreDiv);
        jreDiv.innerHTML = html;
        appearX('waiting');
    } 
    else {
        launchJNLP(jnlpUrl);
    }
    */
        launchJNLP(jnlpUrl);
}

function webstartVersionCheck(versionString) {
    
    /*
    if(windowsIE)
        return true; // Don't bother checking because java will auto-install on IE
        */
    
    if(!navigator.javaEnabled()) 
        return false;
    
    // First, determine if Webstart is available
    if(navigator.mimeTypes['application/x-java-jnlp-file']) {
        
        // Next, check for appropriate version family
        for(var i = 0; i < navigator.mimeTypes.length; ++i) {
            pluginType = navigator.mimeTypes[i].type;
            if(pluginType.indexOf('java')>=0)
                log("Found plugin type " + pluginType);
            if(pluginType == "application/x-java-applet;version=" + versionString) {
                return true;
            }
        }
    }
    
    var appletFound = false;
    
    if($('vcheck')) {
        try {
            appletFound = document.vcheck.isActive();
        }
        catch(e) {
            // ignore
            log("error accessing isActive method / property on version check applet");
        }
    }
    
    
    if(appletFound) {
        var actualVersion = document.vcheck.getVersion();
        log('Found version check java applet - ' + actualVersion);
        
        var parts = versionString.split('.');
        var requiredMinorVersion = parseInt(parts[1],10);
        
        parts = actualVersion.split('.');
        var actualMinorVersion = parseInt(parts[1],10);
        
        if(requiredMinorVersion <= actualMinorVersion) {
            return true;
        }
    }
    
    return false;
}

function launchJNLP(app) {
    appearX('waiting');
    appendChildNodes(document.body, createDOM('IFRAME',{src: app, style:'display:none;'}));
    setTimeout(diagnoseStartProblem, 5 * 60 * 1000);
}

function diagnoseStartProblem() {
    showStartSection('startProblemHelp');
    $('step1boxes').style.height = 'auto';
}

function checkPlatform(p) {
    return detect.indexOf(p) + 1;
}
function startVersionCheckApplet() {
    
  if(!navigator.javaEnabled())
        return false;
    
  if($('vcheck')) // Already exists
      return;
  
  log('Starting version check applet');
  $("applet").innerHTML = '<APPLET id="vcheck" style="display: block;" name="vcheck" CODE="VersionCheckApplet.class" WIDTH="0" HEIGHT="0"></APPLET>';
  return true;
}

function studyHelp() {
    alert('By default all studies and images for this patient will be sent.\n\n'
         +'You can select a single Study and even select one or more Series individually if required.');
}

function showProblemForm(e) {
    if(e) {
        e.stopPropagation();
        e.preventDefault();
    }
    hide('startProblemHelp');
    show('helpers');
    hide('problemResultFields');
    show('problemInputFields');
    document.supportForm.description.focus();
}
